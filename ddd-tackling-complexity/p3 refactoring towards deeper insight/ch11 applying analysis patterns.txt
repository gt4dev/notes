ch11 applying analysis patterns


- ee bazuje na ksiazce 'analysis patterns' by fowler

- w porownaniu do patterns z P3.Chapter10 lub Part2 - to patterny HL 

- pozwalaja zaoszczedzic czas na extensive trials, errors and self-learning [re-inventing the wheel]

- APs stanowia 'starting point', do rozbudowania, zaleznie od potrzeb


EXAMPLE: earning interest with accounts

- bazuje na AP/"Inventory and accounting" [ch6]

model
- w wielu biznesach sledzimy account i zmiany na account
 | Account |<>-----*--| Entry |--2------| Transaction |
   balance
   
- wartosc dodawana jest przez wstawianie entry
- 'odjamowana' - przez dodanie entry z ujemna wartoscia


c: podczas kodowanie - model ustalony z expertem okazal sie on zly, acz
- wyznaczyl glowne kierunki dzialania
- sporo detali trzeba bylo podorabiac


c: podczas kodowania - okazalo sie ze devs musza stosowac okreslone struktury w DB 
- zeby baza byla czytelna [podobnie jak model]
- to wymusilo tez konkretne struktury w modelu domenowym
// g: to b. sensowne - zeby latwo transformowac model w db


mega-c case
figure 11.7
                                           fees
  | Fee Calculator         |---| Asset |==========| Account |-----| Entry |
  |                        |             interest
  | accrualFor(Date):Entry |
    
- FE nie jest na diagramie zw. z Entry a jego metoda zwraca Entry!!!
// g: mozliwe ze to blad? czy moze w modelu pokazujemy "trwale asocjacje"
- w/w metoda to p/p fabryka
- acz pewnie mozna by Entry wziasc jako param metody w FE i tez na modelu tego NIE pokazemy

c ab. SEFF
- metoda FE.accrualFor(Date):Entry to SEFF
- FE to e -thus-> SEFF moze byc na czymkolwiek
- metoda zwraca Entry, [pp] e --thus--> SEFF moze zwracac cokolwiek, niekoniecznie immutable vo ...


EXAMPLE [part 2]

- zwykle po refactor [i wyklarowaniu pewnych concepts] inne problemy staja sie wyrazniejsze 
- i tez wymagaja refactors ;]

// cut, EE omawia detale patternu "posting rules" - ale dosc niejasno, brakuje przykladu

- deverlopers zaczeli od "posting rules" ale b. mocno odeszli od pierwotnego patternu
- i to ok


AP ARE KNOWLEDGE TO DRAW ON

- nie zawsze masz szczesie by moc uzyc AP
- a nawet jak trafisz - to i tak najp/p bedziesz musial zmodyfikowac AP do wlasnego case'a

wazne zalety AP
- super init w problem
- wprowadzaja zrozumiale well distilled abstracts + ich nazewnictwo
- informuja o konsewencjach - ktore zaoszczedza problems [time/cash] podczas impl

vin
- jak uzywajasz term z jakiegos pattern - to nie modyfikuj jego znaczenia - niech opisuje <> ten sam koncept
- wpp - wymysl inna nazwe