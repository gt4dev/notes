ch09 making implicit concepts explicit


wiele b. dobrych refactors jest
- po znalezieniu implcit elements [object, relations]
- making them explicit

// g: na modelu 
// - rob all explicit
// - zadnej implicit wiedzy


ch09.1 digging out concepts


- in short: sluchaj bardzo uwaznie domain experts
- jakich terms uzywaja, jak reaguja na twoje termy

- to b. podejrzane jesli expert/dev uzywaja slow ktore nie sa w UL

// g: "all" terms from spec/uc-s/talks musza byc w UL i modelu!!!

- czasem bardzo trudno znalezc 'implicit objects' ktore chcemy zrobic 'explicite'
- widac ze modelowi cos brakuje - ale trudno stwiedzic gdzie jest "problem"

contradictions
- rozni experci domenowi - roznie widza ten sam biznes [PoV doswiadczen ..]
- more: 1 osoba moze dawac infa ktore sa niespojne [jesli sie temu przyjrzymy]

- w/w niekonsystencje sa dobrym miejsce na poglebianie modelu, destylowanie wiedzy

- it's NOT practical to reconsile all contradictions
- nawet tego nie chcemy
- niektore contrad. swiadomie zostawiamy w modelu

- opracowanie dobrego modelu - wymaga wiele, wielu rozmow z expertami doemnowymi


ch09.2 how to model less obvious kinds of concepts


- wg ee next 3 patterns were not obvious when he started oo modeling


ch09.2.1 explicit constraints


- constrains to wazny element modelu
- expressing constraints explicit can greatly improve design

sample
- Bucket object must guarantee the invariant: contents <= capacity
- simple constraint/invariant - thus 
  - can be enforced by "IF like code"
  - add check to each method changing content/capacity
class Bucket {
  float capacity;
  float contents;
  
  // bad: constraint wmieszany w logike metody
  public void pourIn(float addedValue){
    if(content + addedValue > capacity)
      contents = capacity;
    else
      contents = contents + addedValue;
  }

  // good: constraint explicit named and separated from 'code'
  public void pourIn(float addedValue){
    var newCont = content + addedValue;
    contents = constrainedToCapacity(newCont) <<< explicit constraint
  }
  
  float constrainedToCapacity(input){ .. }
}

good version
- wydzielenie c zwieksza czytelnosc "hosting code" i constraint
- named/explicit 'thing' is easier to discuss
- easier to later modify constrint and host code

sygnaly ostrzegawcze ze constraint is distoring design of host
- c reqs data not available on host object
- c appear in multiple objects

w w/w cases - mozliwe ze c nalezy
- dodac do modelu jako nowe obiekty/relacje


example: overbooking policy
- w shipping business - book'ujesz 10% wiecej niz transport moze pomiescic [zwykle i tak sa 'last minute' cancellations]

| voyage |-----------*--| cargo |
                ^   
                | {sum(cargo.size) < voyage.capacity * 1.1}
                |
         ----------------------
         | overbooking policy |     <<< expl. constraint
              
int makeBooking(Cargo cargo, Voyage voyage) {
  if(!overbookingPolicy.isAllowed(cargo,voyage)
    return -1;
  // make booking
  ...
}

bool isAllowed(Cargo cargo, Voyage voyage) {
  "return cargo.size < voyage.capacity * 1.1"
}


ch09.2.2 processes as domain objects


- w domain czasem sa procedury
- procedury 'wyrazamy' explicit uzywajac services

- ale moze byc opcja wykonania procedury/procesu na kilka sposobow
- then the choice between process ver is explicit visible as choice of object - each of which represent STRATEGY


ch09.2.3 specification


- s wymyslil ee z fowler'em w '97

s 
- prodives concise way of expressing rules
- extracts rules/spec from conditional logic
- makes rules/spec explicit in model

- wg ee - stosowanie own patterns - czesto jest bez sensu, nawet szkodliwe
- many old projects tested diff ways - use their exp

// w ch10 tez jest o s

sample: invoice.IsDeliquent():bool
- inner rules moga byc mieszanka
  - prostych testow: is invoice overdue, ..
  - complex tests
    - lepsi customers moga przekraczac limit o x days
    - trzeba sprawdzic historie zamowien customer'a
- w/w r-s nie maja wiele wspolnego z Invoice [thus sa w spec]
- ale te r-s powinny byc w domain layer
- s zawiera business r-s!!!

solutions
- create spec. object that evaluate to boolean
- place there logic [r-s] of tests
- s'y to vs'y
// g: sample "Cargo diagram"  ma spec jako vo

- s wyraza constraints narzucane na inny obiekt
- s sprawdza konkretne warunki, rules

- many s are simple special purpose tests [as w/w isDeliquent example]

- factory can create s - by using data from mixes sources [database, entities ..]

sample: DeliquentInvoiceSpecification
- s sprawdza Invoice'y
- client call
  deliquentInvoSpec.IsDeliquent(invoice123) // tested object is passed to spec
- DIS ma property biznesowe np 'standard grace period = 20d'
- propsy te sa inited pod konkretna grupe Invoices
- DIS zwraca true - tz. invoice jest 'deliquent'

- dostosuj pattern do 'own needs' - nie trzymaj sie tego sztywn - no point


ch09.2.4 applying and implementing specification


// g: co o spec mowi vv, check iddd index

- s unifikuje czesc funkcjonalnosci ktore sa zwykle mocno rozrzucone w app
- funkcjonalnosci:
  - walidacja - test czy object fulfills some needs
  - selekcja - select an object[s] from collection 
  - building to order - spec is specing the creation of new object fitting spec // gt: skad taka nazwa?
- s lokuje te feats w 1 miejscu
all of them are 'the same s' on concept level

// g: "all" specs maja meth isSatisfiedBy(..):bool


VALIDATION


- simplest spec usage

sample
- b.need: app shows warning - if saler checks customer with delinquent bill [zalegÅ‚y rachunek]
- podczas otwierania ekranu - app calls:
    public boolean accountIdDelinquent(Customer customer) {
      var invoice = customer.pobierzJakisInvoice()
      Specification spec = new DelinquentInvoiceSpecification(today);
      return spec.isSatisfiedBy(invoice); // true = spec fulfilled = account is delinquent
    }
- model

  <abstract spec>
  | InvoiceSpecification [IS]   |                 |         |
  |-----------------------------| - - - - - - - > | Invoice |
  | isSatisfiedBy(invoice):bool |                 |         |
  
  <specs impl with real validations>  n: spec moze walidowac 'cokolwiek'
  DelinquentIS : IS {...}   // czy zalegla faktura
  BigIS        : IS {...}   // faktura ok ale czy kwota faktury jest 'big'
  
- real spec
  class DeliquentIS : IS {
  
    constr(Date currentDate){ .. } // n2
  
    public bool isSatifiedBy(Invoice inv){  // n1
      var someData1, someData2 = get some data from tested invoice to validate;
      return compareDateWithConstrDate(someData1, someData2, this.currentDate);
    }
    
    // n1: spec dostaje walidowany obiekt jako param
    // n2: params to cfg validation, eg. threshold when inv. is 'big'
  }
  
  
SELECTION [QUERYING]


- cel: zbudowac spec ktora ustawia kryteria selecta

- wg ee obie spec [validation i selection] to ten sam concept - roznia sie "jedynie" impl.

sample: prove of am
- wez spec z prev. sample
- do repo InvoiceRepository add method selectSatisfying(InvoiceSpec is)
- z: repo keeps data in mem in List<Invoice>
- teraz w selectSatisfying(..) iteruj repo data & check if fulfills spec  -> if T -> return it

sample: sql spec
- jest wiele mozliwych impls of spec & repo - dostosuj impl to own needs
- sql is very natural way of writing spec!

class DelinquentInvoiceSpecification {
  public Set satisfyingElementsFrom(InvoiceRepository ir) {
    return ir.getAllInvoicesOlderThan(this.currentDate.minus("20dni"));
  }
  // - sama spec nic nie wie o sql - i to jest wazne
  // - spec jest czystsza i explicit wyraza intencje biznesowe
}

- client call

  var spec = new "sql based spec for getting delinquent invoices"();
  invoiceRepo.selectSatisfying(spec) // tu jest pp 'double dispatch'


BUILDING TO ORDER [GENERATING]


sample: building from spec
- jak wojsko zamawia jet to mowi: ma miec 2 machy, zasieg 2k km, cena 50M USD
- wojsko nie mowi jak to zaprojektowac - mowi jaka spec maszyna ma spelniac

- wg ee: "mimo ze tak nie wyglada to "spec building" to ten sam koncept spec co przy walidacji/selekcji" 

// g: dziwny pomysl - zapamieta tylko ze ze spec mozna tworzyc obiekty