ch08 breakthrough


- zwrot z refactor'a nie jest liniowy
- male refactory - daja maly zwrot, zwalczaja entropie
- mega wartosc daje wprowadzenie nowej wizj modelu


ch08.01 story of breakthrough


- opowiesc o breakthrough podczas modelowania
- case: bank inwestycyjny agreguje inne banki w celu dania pozyczki pod budowe duzej fabryki (intel)

- model "v1" ma blad - ciezko sie go uzywalo
- jest tam relacja miedzy loan-facility - a w realu tej relacji nie ma

// g: musisz, musisz, musisz testowac model na konkretnych przykladach 
// g: to super destyluje wiedze, pozwala zrozumiec domene, refine'uje model

c: experci domenowi musza rozumiec model z app
- domain experts zglaszali ze nie rozumieja modelu
- ale mysleli ze to technikalia ktorych nie musza rozumiec
- in real: experci musza BARDZO DOBRZE rozumiec model, musza!!!

c: model v2 [po big breakthrough] byl na tyle super ze termy z nowego UL uzyto nawet w folderze reklamowym ;]


ch08.02 opportunities


- po big breakthrough - najpp wymagany bedzie big code refactor
- to troche scary - zmiany w kodzie na roznych poziomach [model i klienci]
// g: ale jak masz dobrze odseparowany model od klientow przez dto ...


ch08.03 focus on basics


// nothing special


ch08.04 epilogue: a cascade of new insights


- po breakthrough i zrobieniu model v2 apka miala czystszy desig i byla 'bogatsza'
- ale w czasie pracy nad v2 - mieli kolejny breakthrough!!!

conc
- model ZAWSZE bedzie sie zmianial, moze byc wiele BREAKTHROUGHS
- nie ma co sie spawac do konkretnego modelu, trzeba byc gotowy na duze zmiany

efekt nie zrobienia refactor po breakthrough: 
- utrzymywanie modelu ktory jest nieefektywny i zatrzymuje rozwoj
