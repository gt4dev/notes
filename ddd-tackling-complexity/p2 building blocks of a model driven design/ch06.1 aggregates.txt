# AGGREGATES


in real business
- objects are heavyily inter-connected
- trudno znalezc ostre granice

przyklad braku granic
- usuwasz e Person
- co z e Address - usunac, zostawic?

- problem rosnie gdy rownoczenie dane crud'uje wielu users

- if many associations between objects = trudno utrzymac consistency

- invariants between related objects must be kept

rozw. w/w probs wymaga znajomosci domeny
- regul
- frequency of data changes in model
- ..

model musi
- utrzymac invariants
- dawac loose between high contending aggs/entities

- pozornie to techniczne trudnosci [zw. z tx]
- realnie to problemy modelu (esp. braku granic)!!!
- fix these probs na poziomie modelu (m. w praktyce bedzie clearer)

c: patterns agg history
- p/b derived from pattern 'ownership relation'
- in short: tx modifies only object and owner

agg def
- agg = zestaw danych, ktore traktujemy jako single unit z PoV of changing data
- agg ma root i granice [i ew. nested e-s]
- others can ref only root
- root has to have global id, nested e-s can use local id 
// g: pp nie ma zakazu dostepu do inners form outer
// g: acz lepiej ukrywac agg details = wysawiac dane jako vo-s

sample
- roots: | car |-----| engine |
- car contains nested e-s: wheel, position, tire
- wydaje sie ze engine should be nested in car
- ale w modelu to rownoprawne e-sy

- zmiany w wielu aggs - sa wykonywane w kilku tx/krokach

inne cech agg
- root is resp for checking invariants
- inside agg
  - root can keep refs to internal e-s, vo-s
  - others - can ref others - only transiently
- tylko root moze byc wczytany z db
  - internals are read by associations traversal [eager|lazy loadeded]
- internals can ref other roots
- delete of agg - removes all associated internals
- on commit - all invariants must be satisfied

- root must know about all changes on inner objects
- thus internals of agg can ref to each other 
  - only transiently
  - in sigle operation [of root]
  
  
EXAMPLE: PURCHASE ORDER INTEGRITY


sample
- init model
<e>                         <e>                    <e>
| purchase order | -----*-> | po line item | ----- | part |
  limit                       quantity               price

- invariant: suma zamowienia w po nie moze przekraczac limitu
- wielu users rownoczesnie crud'uje each e
  
step 1: each e is agg
- w 1 tx chronimy zmiany na 1 e
- nie chronimy invariantu - buuuu

step 2
- create agg: po [with nests "po line item"]
- copy price to po-line-item
  
| <root>                                 // eo agg |  
| | purchase order | <>-----*-> | po line item | --|-----> | part |
    limit                         quantity                   price
                                  price

- invariant jest chroniony przez lock na calym po
- wielu users pracuja na 1 po - i sie wzajemnie lock'uja
- cudow nie ma - jesli inv. ma byc utrzymany to modyfikacje musza byc sync'ed
- optimistic conc. 
  - nie zmieni problemu rownoleglej modyfikacji danych przez many users
  - ale ulatwi reads [?]