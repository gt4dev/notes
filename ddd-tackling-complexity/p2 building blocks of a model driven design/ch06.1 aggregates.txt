# AGGREGATES


in real business
- objects are far interconnected
- ciezko znalezc ostre granice

przyklad braku granic
- usuwasz z bazy e: Person [plus vo: imie, wiek ..]
- co z e: Address - tez usunac?

- problem zwieksza crud'owanie danych przez wielu users

- if many associations = trudno utrzymac consistency
- invariants must be kept between related objects

rozw. tych probs wymaga znajomosci domeny
- regul 
- frequency of changes in model
- ..

model musi jednoczesnie trzymac 
- invarianty
- loose high contenting elems [aggs/entities]

- pozornie to techniczne trudnosci [zw. z tx]
- ale realnie to problemy z modelu!!!
- z braku granic

- fix w/w probs na poziomie modelu
- m. bedzie clearer/easier

c: patterns agg history
- p/b comes from pattern 'onwership relation'
- in short: tx-es modify only object and owner

agg def
- agg = zestaw danych, ktore traktujemy jako single unit z PoV of changing data
- agg ma root i granice [i ew. dodatkowe e-s]
- others can ref only root
- inside agg - each can ref each [but transiently]
- root has to have global id, nested e-s can use local id 
// g: nie ma mowy o zakazie dostepu do inners form outer
// g: acz moze lepiej ukrywac agg details = wysawiac dane jako vo-s

sample
- roots: car, engine
- car contains: wheel, position, tire
- wydaje sie ze engine should be nested in car
- ale w modelu sa to rownoprawne, associated e-s

- zmiany w wielu aggs - sa wykonywane w kilku tx, korkach

inne cech agg
- root is resp for checking invariants
- inside agg
  - root can keep refs to internal e-s, vo-s
  - others - can ref others - only transiently
- tylko root moze byc wczytany z db
  - internals are read by associations traversal [eager,lazy loadeded]
- internals can ref other roots
- delete of agg - removes all its internals
- on changes commit - all invariants must be satisfied

- access agg content [to boundary] - through the root
- root must know about changes of inside objects
- thus internals of agg can ref to each other 
  - only transiently
  - in sigle operation [of root]
  
  
EXAMPLE: PURCHASE ORDER INTEGRITY


sample
- init model

| purchase order | -----*-> | po line item | ----- | part |
  limit                       quantity               price

- invariant: suma zamowienia w po nie moze przekraczac limitu
- wielu users bedzie rownoczesnie crud'owac: po, po-line-item, part
  
approach 1: each e is agg
- w 1 tx chronimy zmiany na 1 e
- nie chronimy invariantu

fix
- create agg
- copy price to po-line-item
  
| <root>                                           |  
| | purchase order | <>-----*-> | po line item | --|-----> | part |
    limit                         quantity                   price
                                  price

- invariant jest chroniony przez lock na calym po
- wielu users pracuja na 1 po - bedzie sie wzajemnie lock'owac
- cudow nie ma - jesli inv. ma byc utrzymany to modyfikacje musza byc sync'ed
- optimistic conc. 
  - nie zmieni problemu rownoleglej modyfikacji danych przez many users
  - ulatwi reads [?]