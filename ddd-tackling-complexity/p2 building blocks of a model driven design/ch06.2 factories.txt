# FACTORIES

- use f to create agg [or any other complex object]

analogia
- jest silnik samochodu i fabryka silnikow
- silnik siebie nie stworzy - to nie jego zadanie
- identycznie w OO - sa obiekty i ich fabryki

CAN'T mix resp of
- creating object
- object's logic itself

even simple call of obj constr CAN be bad
- makes client hard dependent to object
- trudno zmieniac object bez zmiany klienta

klient
- nie powien tworzyc obiektow
- powinien ich tylko uzywac

- creation is done in domain layer
- but [usually] it's not strictly expressed in UL/domain

factory patterns
- f method
- abstract f
- builder
- ...

in good f
- creation is atomic
- after creation
  - all invariants are satisfied
  - state is consistent
- f returns [rather] abstract type


## 1 CHOOSING FACTORIES AND THEIR SITES


- f to najczesciej metoda hooked on existing domain object
  - ma dostep do init data of 'host'
- rzadziej jest sandalone
  - glownie gdy tworzymy veeeeery complex object


below way A & B - both are f hooked on existing object

way A: place f on object which owns created object

sample: you crete obj to add it to existing agg
- place f method on the root
- client does't know agg internals
- agg is resp. for assuring consistency of 
  - new object
  - 'this/host-agg' after adding created object to itself


SAMPLE

<root>        <f method>                     
purchaseOrder.newItem(productNumber,quantity):IdOfCreatedInternalEntity

- f tworzy internal e
- utworzone obiekty te sa JUZ dodane do agg [chyba?]

way B: place f on object spawning new object

- "object with f" doesn't own created object
- but close location to 'data src' pozwala zaoszczedzic na "przepychaniu danych" miedzy obiektami

sample

<root>           <f method>                 <root>
brokerageAccount.newBuy(stockSymbol,amount):TradeOrder
accNumb = a123                              brokerAccoundId = a123
customer = 'john'                           stockSymbol = sthFromParam
                                            amount = sthFromParam
- trade order [TO] jest osobnym agg
- TO jest wypelniony danymi z BA 
- stad f najlepiej bylo dodac f na BA


## 2 WHEN CONSTRUCTOR IS ALL YOU NEED


- zwykle chcemy f-s
- ale czasem constr

cases
- obj nie jest czescia hierarchii, nie uzywa polimorfizow, interface'ow ...
- dla client'a wazna jest impl [eg. w strategy patt]

- vi: avoid calling constrs inside another constrs 


## 3 DESIGNING THE INTERFACE


// cut


## 4 WHERE DOES INVARIANT LOGIC GO


- f jest odpowiedzalna za stworzenie obj z satisfied all invariants


## 5 ENTITY FACTORIES VS VO FACTORIES


- vo f - od razu tworzy finalna wersje obj [bo vo jest immutable]
- e f  - raczej tworzy e w minimalnej wersji


## 6 RECONSTITUTING STORED OBJECT


- use case'y: odtworzenie obiektu wczytanego z sieci, bazy ...
// g: jaka diff z repo? chyba rzadki case?
- czasem jest case: init data sa incorrect - then
  - obj. can't be re-created
  - moze trzeba usunac invalid init data [from db, file ..]