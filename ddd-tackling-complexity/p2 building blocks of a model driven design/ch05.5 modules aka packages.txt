# MODULES [AKA PACKAGES]


- cognitive overload is primary reason for creating modules
- it's easier to understand
  - module details [w/o worrying ab. outer m-s]
  - modules interactions [w/o worrying ab. m-s details]

- human has limit of how many things can understand at once 
- hence prefered is m-s low coupling

- keep rules
  - low coupling between m-s
  - high cohesion inside m
- these rules are
  - important on m-s level
  - on class level - it's 2nd-ary aim, "nice to have"

- podzial i nazwy m-s [eg customer] - wynikaja wprost z UL


## 1 AGILE MODULES


- rzadko refactoruje sie m-s = to blad
- m-s refactor on each need
- acz to trudniejsze niz refactor class, metody ...

- c: czesto podzial na moduly jest staly od poczatku projektu

brak refactora prowadzi do
- high coupling between m-s
- low cohesion inside m


EXAMPLE: PACKAGE CODING CONV. IN JAVA

EE 
- recoms imports like "import some.pack.*"
- NOT "import some.specific.Klazz"


## 2 THE PITFALLS OF INFRASTRUCTURE DRIVEN DESIGN


trzymaj osobno each layer [layered architecture]:
- infrastructure
- user interface
- domain layer

// g: old j2ee spec is totally against "MDA/DDD"
