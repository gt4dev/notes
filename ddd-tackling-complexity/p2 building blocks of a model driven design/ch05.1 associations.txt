# ASSOCIATIONS


- przejscie z modelu do impl jest szczegolnie tricky dla asocjacji

- kazda asocjacja z modelu - w impl jest properties'ami

mech asocjacji
- klasyczne refs [miedzy pojo-s]
- zwracanie obiektu zbudowanego podczas wolania 'property-get' [przez look-up do db, ...]

z punktu widzenia model
- widzimy tylko property
- "nie interesuje nas" mech asocjacji [ref, lookup ..]

w real-life najwiecej relacji jest typu:
- many to many
AND
- bidirectional

- 1st sketches model maja duzo ww relacji
- to czesto
  - niepotrzebnie komplikuje model
  - nic nie mowi o realnej semantyce z domeny
  
metody upraszczania asocjacji
- imposing traversal direction
- dodaj kwalifikator [eliminacja: */multplicity/wielosci]
- usuniecie nieistotnych asocjacji

- upraszczanie wymaga zrozumienia domeny

- uprosc relacje tak mocno jak to mozliwe

- asocjacja bidirectional - oznacza ze 2 obiekty moga byc zrozumiane tylko razem

sample - add direction
- usa mialo wielu prezydentow
- mamy relacje: 1 to many, bidirect
- ale "nikt" nie startuje od G.Washington'a i pyta "czyim byl prezydentem"
- ustawiamy relacje unidirect.
                    president
  | Country | -------------*-> | Person |
- teraz klasa Person nie zalezy od idei "president" klasy Country ..

sample - add qualifier
- jest tylko 1 prezydent w danym momencie
- uzycie kwalifikatora redukuje relacje z 1-m do 1-1 !!!
- dodatkowo modelu pokazuje wazna regule biznesowa

                            president
  | Country |[period] ---------------> | Person |
             ^^^^^^^^ kwalif.

c
- dodajac unidirect. traversal na relacje many-to-many
- robisz relacje 1-to-many
- jest duzo prostsza w implementacji

- usun relacja ktora nie wnosi wartosci do modelu [np. nie potrzebujes danej wiedzy]


EXAMPLE - ASSOCIATIONS IN A BROKERAGE ACCOUNT

- model
  - brokerage account | -------*-> | investment
                      | 
                      | ---------- | customer
- kod
  class BrokerageAccount {
    Set getInvestments() {...}   // 1-to-m
    Customer getCustomer() {...} // 1-to-1
  }
- c: EE uzywa getter'y, a VV odradza ;]
- impl. BrokerageAccount
  - POJO
    Customer getCustomer() {return customer;} // <-- zwroc zainicjowane pole klasy
  - SQL
    Customer getCustomer() {
      zapytaj baze, stworz and return Customerit // u: not clean code
    }
- z client PoV - nie ma roznicy miedzy w/w impls [pojo, sql]

usuniecie ww multiplicity
- z: z b.needs wynika ze BroAcc moze miec tylko jedna (!!!) Inv dla danego stock'a [kij z semantyka]
- nowy model
  - | brokerage account |[stock] -------> | investment |
- nowy kod
  class BorkerageAccount {
    Investment getInvestments(string stock) { // 1-to-1, zwraca 1 obiekt, ograniczenie jest parametrem w metodzie
      return investments.get(stock); // inv. to mapa, ale to impl. detal, w sql bedzie inaczej, niewazne ;]
    } 
    ...
  }