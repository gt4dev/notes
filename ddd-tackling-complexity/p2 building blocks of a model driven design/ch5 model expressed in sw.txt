- aby miec dobry "model driven design"
- polaczenie modelu i impl musi byc zrobione na poziomie detail [impl]

- asocjacje latwo sie rysuje na diagramie
- ale sa potencjalnie trudne do zakodowania

c: jesne zdef. czym jest E, VO ...
- zwieksza czytelnosc modelu/kodu, ulatwia projektowanie
- mieszanie definicji - konczy sie choasem

- moduly/namespace'y - musza pochodzic z UL


# 1 ASSOCIATIONS


- przejscie z modelu do impl jest szczegolnie tricky dla asocjacji

- kazda asocjacja z modelu - w programie jest odzwieciecdona properties'ami

asocjacje moge byc oparte na diff mechs
- klasyczne refs [do pojo-s]
- zwracanie obiektu zbudowanego obiektu podczas wolania 'property-get' [look-up do db, ...]

z punktu widzenia modelu 
- widzimy tylko property
- "nie interesuje nas" skad asocjacja pobiera dane/obiekty

w real-life mamy najwiecej relacji jest typu:
- many to many
- bidirectional

- 1st sketches of doain model - tez maja duzo w/w relacji
- ale to b. czesto
  - niepotrzebnie komplikuje model
  - nic nie mowi o rzeczysistej semantyce relacji
  
metody upraszczania asocjacji
- imposing traversal direction
- dodaj kwalifikator [eliminacja multplicity/wielosci/*]
- usun nieistotne asocjacje

- upraszczanie wymaga zrozumienia domeny

- wazne: ogranicz relacje tak mocno jak to mozliwe

c: asocjacja bidirectional - oznacza ze 2 obiekty moga byc zrozumiane tylko razem

sample 
- usa mialo wielu prezydentow
- mamy relacje: 1 to many, bidirect
- ale "nikt" nie startuje od G.Washington'a i pytania "czyim prezedentem byl GW"
- stad mozemy uprosc relacje, zrobic unidirect. 
  | Country | ------[president]-*-> | Person |
- teraz klasa Person nie zalezy od idei "president", klasy Country ..
- n: zeby upraszczac musisz znac model domenowy, sposob jego uzycia

sample - kwalifikowana relacja
- jest tylko 1 prezydent w danym momencie
- uzycie kwalifikatora redukuje relacje do "1 to 1"!!!
- dodatkowo widzimy na modelu wazna regule biznesowa

  | Country |[period] --------[president]--> | Person |
             ^^^^^^^^ kwalif.
             
mega-c
- narzucajac traversal na relacje many-to-many
- robisz z niej relacje 1-to-many
- ktora jest znacznie prostsza w implementacji

- jesli relacja nie wnosi istotnej wartosi do modelu - usun ja


EXAMPLE - ASSOCIATIONS IN A BROKERAGE ACCOUNT

- model
  - brokerage account -----*--> investment
  - ................. --------- customer
- kod
  class BrokerageAccount {
    Set getInvestments() {...}
    Customer getCustomer() {...} 
  }
- c: EE uzywa getter'y, a VV odradza ;]
- w impl. POJO of BrokerageAccount
    Customer getCustomer() {return customer;} // <-- zwroc zainicjowane pole klasy
- w impl. SQL of BrokerageAccount
    Customer getCustomer() {
      zapytaj w RT baze, stworz obiekt Customer, return it // to tylko przyklad, not clean code
    }
- n: z client PoV - nie ma roznicy miedzy w/w impls [pojo, sql]

usuniecie multiplicity miedzy BroAcc - Investment
- z: z b.needs wynika ze BroAcc moze miec tylko jedna (!!!) Inv dla danego stock'a [kij z semantyka]
- nowy model
  - | brokerage account |[stock] -------> | investment |
- nowy kod
  class BorkerageAccount {
    Investment getInvestments(string stock) { // n: zwraca 1 obiekt, ograniczenie jest parametrem w metodzie!!!
      return investments.get(stock); // inv. to mapa, ale to impl. detal, w sql bedzie inaczej, niewazne ;]
    } 
    ...
  }


# 2 ENTITIES

- Es aka 'reference objects'
// q: ciekawe skad ta nazwa

many objects are defined by
- thread of continueity
- identity
a nie przez attrs

example: Person
- has identity that streches from birth to death [and beyond ;]
- zasadniczo all attrs of person mozna zmienic w ciagu zycia [i poza nim ;]
  - phisycal attrs are changing all the time [ultimatelly disappear ;]
  - nazwisko, relacje z biznesami, edukacja ...
- ale to caly czas ta sama osoba
- thus: the most most most imporatant is identity

example: customer
- w app do 
  - do sledzenia "dlugow" beda informacje rachunkach, platnosciach ...
  - sprzedazowym: osoba prowadzaca, ...
- good done identity allows to identity customer in both w/w systems

- w/w apps moga byc mega rozne [rozne langs, bazy ...]
- ale maja wspolne identity - ktore laczy customers w obu/all apps

- e to obiekt zdef. przede wszyskim przez identity
- e moga sie kompletnie-totalnie sie zmieniac w LC
- ale musze utrzymywac
  - thread of continiuty
  - "constant" identity [tz. takie po ktorym mozna obiekt "sledzic"]
  
- e = anything that has 
  - continuity through a life cycle
  - [vvvv imp] distinction independent from attrs
- zatem e rozrozniasz przez id, not attrs

example: 2 transfers on the same: account, day; and the same cash
- to sa osobne tx'y
- maja diff identity [sa e]
- wewn. e mozna re-use attrs [obiekt reprezent. day, cash ...]
  - ale attrs nie maja identity
  
vvv c
- teoret. w app mozesz miec 2 diff classes [z totalnie diff attrs]
- ale jesli beda uzywac TEGO SAMEGO identity [do identyfikacji]
- to opisuja one "ten sam obiekt" [abstract]

- samo identity [jako abstrakt/obiekt] moze miec wazne znaczenie poza app
// g: pewnie do 'rozszerzania' identyf. encji

[bolded def]
- if object is distinguished by id [not attrs]
- klase zrob prosta, focused on 'thread of continuity', identity
- dodaj mozliwosc rozroznienia each object - niezaleznie od jego formy/histori
- n: alert if matching E is done by attrs - it's very suspected


## 2.1 MODELING ENTITIES


- podczas projektowania obiektu wielu mysli sie o attrs i zachowaniach
- ale najwazniejsze w e jest ustanowienie 'continuity'
- wowczas reszta [attrs/zachowania] moga byc "czystsze"
- najlepiej jesli e ma malo attrs/zachowan
- zostaw w e "tylko" the most important attr - esp. these which
  - identify e [g: chodzi o klucz naturalny?]
  - sluza do odnajdywania/match'owanie konkretnych e
- reszte attrs/zachowan - TRY to move to associated with e-s / vo-s

- e-s also coordinate operations on objects nested/associated with these e-s

sample
- model on init
  | customer |<>--------| sales contact |
- both classes have "some attrs"
- redesign a/m attrs to follow a/m rules
- model refined
  | customer |<>--------| sales contact |
  |          |<>--------| business line |
  - do klasy customer wrzucilismy attrs ktore pozwola na wyszukania/match'owania customer - by
    - contact name
    - ...     phone
    - ...     address
    [wczesniej te attrs byly w customer & sales contact]
  - acz to mega zalezy od reqs - np. customer moze miec wiele phone numbers [owner, ksiegowosc, ..]
    - wowczas jakis phone number bedzie w klasie 'sales contact', inny w ...


## 2.2 DESIGNING THE IDENTITY OPERATIONS


- identity musi dawac mozliwosc "zident" danej e - niezaleznie od sytuacji [eg. system rozproszony, data archived ..]
- definicja identity wymaga zrozumienia domeny

- czasem set of attrs can guarantee uniqeness of e in app
- mozna ten set uzyc jako unique id

- czasem nie mamy takiego set
- wowczas dodajemy do e jakies pole z unique cyfra/string/...

// <cut/> troche inf o innych aspektach id-ow

- czasem id musi byc uspojnione miedzy wieloma systemami
- np. medical records exchanged between hospitals [with diff soft]
- w perfect case - pacjenci maja to samo ID w kazdym systemie 
- w realu kazda app ma swoje id's
- wowczas match'owanie diff IDs - mozna zrobic uzywajac 3th ID - wydanych przez nadrzedna instytucje rzadowa
- acz moga byc problems [nie wyszyscy maja common id [dzieci, rezydenci], nie wszyscy chca miec - bo privacy, ...]

// <cut/>


# 3 VALUE OBJECTS

- wiele obiektow nie posiada identity
- obiekty te opisuja rzeczy

- tracking the identity of entities is essential
- ale niepotrzebne id - make soft more complex - nie chcemy tego

- vo to NIE jest "e bez identity"
- vo to obiekty ktore opisuja rzeczy

sample
- color can be are vo
- uzycie color vo moze byc proste [it's simple object]
- but internals of vo moga byc complex [alg. mieszania kolorow]
- ale result to colors mixing = another simple vo object

- vo-s moga zawierac inne vo-s [i to sporo]
- vo-s moga ref'owac entities
- np. map service 
  - moze zwrocic vo reprezentujacy trase (Route)
  - a Route moze ref'owac e-sy reprezentujace miasta: startowe, koncowe, posrednie
  
- vo-s sa czesto przekazywane jako params w komunikatach miedzy objects
- zyja wtedy b. krotko - w czasie wolania operacji

- vo-s sa uzywane jako attrs of: e-s, innych vo-s

- when you care only about attrs of element - make it vo
- don't give it any identity
- treat vo as immutable

conceptual whole [co]
- attrs wewnatrz vo - powinny tworzyc CO [ward cunnigham pattern]
- sample: 
  - masz klase Customer z mieszanka attrs: id, name, phone, street, city ...
  - attrs: street, city ... wydzielamy do osobnej klasy Address = co
  - nowy model | Cusomter |<>------- | Address |

czy Address to VO czy E
- ZALEZY: OD SYSTEMU, "kto pyta"
- przyklady [ale duuuuzo zalezy od reqs]
- jako vo
  - adres jest 'prosta' inf o miejscu dostarczeniu paczki
  - nie ma znaczenia ze wiele diff objects ma te same attrs ...
- jako e
  - adresy tworza hierarchie, kolejne elementy hierarchi uszczegulawiaja adres
  - sledzimy zmiany adresu etc.
- czasem e plus dodatkowo e skonwertowane na vo
  - system laczy all w/w case'y


## DESIGNING VO




## DEIGNING ASSOCIATIONS THAT INVOLVE VOS




# SERVICES




### SERVICES AND ISOLATED DOMAIN LAYOER




### GRANULARITY




### ACCESS TO SERVICES




# [TBD ... FEW CHAPTERS MORE]