# ENTITIES


- e-s aka 'reference objects'

many objects [all e-s] are defined by
- thread of continuity
AND
- identity
.. nie przez attrs

example: Person
- has identity that streches from birth to death and beyond!
- ogolnie all attrs of person mozna zmienic w ciagu zycia [potem tez ;]
  - body metrics, nazwisko, relacje z org. finansowymi, edukacja ...
- ale to caly czas ta sama osoba
- thus: THE MOST imporatant is identity

example: Customer
- w app do
  - sledzenia "dlugow" beda informacje o rachunkach, platnosciach ...
  - sprzedazy: osoba prowadzaca, historia zakupow ...
  
- good identity allows to identify the same customer in many systems
- apps moga byc totalnie rozne [rozne langs, bazy ...]
- ale maja wspolne identity - ktore laczy customers w all apps

- e definuje przede wszyskim identity
- reszta e moze sie totalnie zmieniac w LC
- e musi utrzymac
  - thread of continiuty
  - "constant" identity [tz. takie po ktorym mozna obiekt "sledzic"]
  
- e has distinction [from others instances] independent from attrs

example: two diff cash transfers with the same: account, day, amount
- to osobne e-sy - maja diff identity
- wewn. e mozna re-use attrs: day, cash ...
- ale attrs nie daja identity
  

vvv c
- teoret. w app mozesz miec 2 diff classes [z totalnie diff attrs, w 2 roznych systemach]
- ale jesli beda uzywac TEGO SAMEGO identity [do identyfikacji]
- to opisuja one "ten sam obiekt"

- samo identity [jako abstrakt/obiekt] mozesz uzywac poza swoja app
// g: pp do 'rozszerzania' encji

- if object is distinguished by id [not attrs]
- zrob prosta klase, focused on 'thread of continuity', identity

- it's very suspected if matching e-s is done by attrs 


## 1 MODELING ENTITIES


- podczas projektowania obiektu wielu devs mysli o attrs i zachowaniach
- najwazniejsze w e jest 'continuity'
- wtedy reszta [attrs/zachowania] moze byc "czystsza"

- najlepiej jesli e ma malo attrs/zachowan
- zostaw "tylko" the most important attr - esp. these which
  - identify e
  - sluza do odnajdywania/match'owanie konkretnych e
- reszte attrs/zachowan - try to spread around - to associated e-s / vo-s

- e coordinate operations on objects nested/associated with current e

sample
- model - init
  | customer |<>--------| sales contact |
- both classes have "big group of attrs"
- model - refined
  | customer |<>--------| sales contact |
  |          |<>--------| business line |
  - customer ma teraz attrs do wyszukania customer - by contact's name, phone, address
  - wczesniej te attrs byly w customer i sales contact
  - acz to mega zalezy od reqs 
    - np. customer moze miec wiele phone numbers [owner, ksiegowosc, ..]
    - wowczas phone owner number bedzie w klasie 'sales contact', etc ...


## 2 DESIGNING THE IDENTITY OPERATIONS


- identity musi umozliwiac "ident" e niezaleznie od sytuacji [eg. system rozproszony, e-s archived ..]

- definicja identity wymaga zrozumienia domeny
- czasem set of attrs can guarantee uniqueness of e in app -> use it
- czasem nie ma 'natural set of attrs' - use 'artif. id'

// <cut/> troche inf o innych aspektach id-ow

- czasem id musi byc uspojnione miedzy wieloma systemami
- np. medical records exchanged between maaaany hospitals [with diff soft]
- w perfect case - pacjenci maja to samo ID w kazdym systemie 
- w realu kazda app ma swoje id's
- wowczas match'owanie diff IDs - mozna zrobic uzywajac 3th ID - wydanych przez nadrzedna instytucje rzadowa
- acz moga byc problems [nie wyszyscy maja id [dzieci, rezydenci], nie wszyscy chca miec - bo privacy, ...]

// <cut/>
