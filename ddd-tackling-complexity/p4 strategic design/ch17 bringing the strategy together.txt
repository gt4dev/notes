ch17 bringing the strategy together


byly 3 ch o strategic design 
- ch14 - bc i jego relacje
- ch15 - distilling [core, generics ..]
- ch16 - lss [ewolucja, metafory, resp. layers ..]

3 principles of strategic design = context, distillation, lss


17.1 combining lss-s and bc-s


c: 
- resp. layers - najczesciej widac wewn 1 bc [g: pp czesty case projektu]
- ale stosuje sie w many-bc projektach

c: obsluga legacy systems
- legacy olewaja nasze resp-layers - wiec na diagrami layers - legacy zajmuje many l-s

c: legacy system = osobny bc
- ee rysuje 'legacy system' na diagramie jako bc [g: wczesniej byly watpliwosci czy to bc czy co]
- np digram 17.4 'legacy shipping coordination context' = bc

C: DOSTEP DO LEGACY PRZEZ ACL OR REPOSITORY
- NEW BC-ES WOLAJA LEGACY PRZEZ
   - ACL - TU SIE ODCINAMY OSTRO OD LEGACY I WRAPUJY W ACL
   - REPOSITORY [!] - TU LEGACY TRAKTUJEMY JAKO 'SEMI-DB' I PROSTYM REPO ROBIMY CRUD DANYCH [W NASZYM UL]

c
- w systemie moze byc kilka lss'ow, np:
   - 1 do wspolpracy miedzy bc'ami
   - 1 do strukturyzowania wnetrza duzego bc'a
- ale nie przesadzaj - bo za duzo = problem z utrzymaniem = erozja


17.2 combining lss-s and distillation


- tu lss wyjasnia m.in. relacje miedzy core-domains i generic subdomains

example: diagram 17.6
- 4 warstwy: decision, policy, opers, poten
- kazda warstwa ma kilka modulow/bc'ow
- kilka core modules [tak, moze byc kilka core modules], kilka generic
- vvc: CZESC bc'ow ma nazwe ktora odpowiada reps danej layer np. routing policy, billing policy
   - ale WIEKSZOSC ma nazwy niezalezne od resp-layer 
- vc:
   - kazdy bc z osobna jest spojny i zrozumialy
   - bez lss - nie widac by bylo wartosci calego systemy [wtf??, a 'z' widac??]
   - dzieki lss - kazdy bc ma konkretne resonsibilities [decision, policy ..]


17.3 assessment 1st


- on init of strategic design in project
   - assess current project situation
   - find the most urgent needs

do:
- narysuj ctx map
   - da sie w ogole narysowac? moze sa niejasnsci jak co dziala?
- ocen UL'e
   - czy w ogole sa UL'e w projekcie?
- czy jest core domain, domain vision statement
- ... // and many others

// G: WW TA LISTA PP POKAZUJE CO JEST WAZNE W DDD


17.4 who sets the strategy


- n: strategy jako bc, distillation, lss ...

- czesto arch. jest narzucona odgornie
- niekoniecznie to dobre
- lepsze sa nw ways


17.4.1 emergent structure from app development


- struktura wyrasta z potrzeb developmentu

- JAK MAMY SELF-DISCIPLINED TEAM + GOOD COMMUNICATION - TO PP STRUKTURA SAMA POJDZIE W DOBRYM KIERUNKU 
- drived esp. from devs with high look on project

leaderzy w team 
- sa arbiter'ami/facilitator'ami
- nie sa zrodlem idei, te daja teams

- jesli lss - dziala na kilku bc'ach - to przy dobrej komunikacji miedzyzespolamia - mozliwa jest samoorganizacja i emerge of structure
- teams dogaduje wyglad lss
- acz teams musza byc podobne, miec podobne potrzeby i wspolnie wytworzona lss ma wspierac wszystkich
- teams nie moze byc za duzo


17.4.2 customer-focused architecture team


- tu centralizujemy tworzenie 'struktury'
- jest to ok gdy 'arch team' jest peer'em dla dev'ow a nie 'ivory tower'
- 'ARCH TEAM' TEZ MUSI UCZESTNICZYC W DEV [MIEC DIRTY HANDS] - ZEBY MOC ROBIC DISTILLATION ETC...


17.5 six essentials for strategic design [sd] decision making


JESLI LEAD ARCH ROBI NW TO ARCH BEDZIE OK
- decisions must reach entire team
   - WSZYSCY MUSZA ZNAC STRATEGIE I STOSOWAC JA
   - c: decisions of 'ivory tower architects' sa czesto bez sensu
- decision process must absorb feedback
   - robienie lss lub distilation wymaga deep understanding of domain / project needs
   - nasluchuj idei z dev teams i uwzg. w development/sd
- plan must allow for evolution
   - effective sw development to bardzo dynamiczny proces
   - even the highest level decisiouns can't be rigid
   - sd musi uwzgledniac zmiany wynikajace z lepszego zrozumienia problemu/domeny
- arch. teams can't hire best devs
   - management czesto bierze best devs do zespolow arch
   - ale to oslabia dev teams
   - musisz miec mocnych designers w dev teams
   - strategy musza tworzyc ludzie znajacy domene [pewnie <> te same osoby]
- SD REQS MINIMALIZM AND HUMILITY [POKORA]
   - MINIMALIZM IS CORE OF ANY ANY DESIGN WORK [NOT ONLY SD]
   - bo jak za duzo wsadzimy to jest szansa ze bedzie to zarodek smell i potem calosc updanie
   - EE CZESTO WIDZIAL [I SAM ROBIL ;] OVERENGINEERED ARCHS = SA COUNTERPRODUCTIVE
   - sol: pryncypia of ds musza zawierac tylko elementy ISTOTNIE POPRAWIAJACE jakos design'u
- OBJECTS ARE SPECIALISTS, DEVS ARE GENERALISTS
   - dobry object design = obiekty maja jasne i waskie resps i maja micro-malne deps do innych objects
   - w teams przeciwnie - ALL czlonkowie [devs, leaders, archs ..] nawzajem interesuja sie sprawami innych devs 
   - in short: let the objects be specialists and devs be generalists
   - prob: ludzie kochaja specjalizacje = devs nie lubia domain probs, domain experts - nie lubia technologii ...
   - specjalizacje sa potrzebne [czlowiek nie moze wiedziec all] ale zbytnia specjalizacja oslabia ddd
   

17.5.1 the same goes for the technical frameworks [tf]


- tf greatly accelerat development [nie musisz sam pisac 'orm' ;]
- prob: czasem tf moze interferowac z impl. modelu / app layers i stopowac jego 'easy change'
- nie powinno sie pisac tf for dummies [g: powinny byc highly costomizable? ale zgodnie z LiskovSubPrincile?]
- devs MUSZA widziec jak tf prawidlowo uzywac


17.5.2 beware [strzesz sie] the master plan


- ee podaje przyklad architekta ktory promowal idee organic growth of cities
- wg tego arch - 'master plans fail' bo
   - nie sa dostosowane do real needs [of local communities]
   - nie sa dostosowane do nieprzewidzianych zmian w LC of community
- sol: zamiast master plan - create set of principles - ktorego plany realizuja
