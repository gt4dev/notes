ch15 distillation


// ref
- ch o tym jak fokusowac sie na main problem i nie tonac w side issues
- MODEL IS A DISTILLATION OF KNOWLEDGE
- kolejne refactory ulepszaja domain knowledge i model


// book
c
- layered arch - rodziela domene i tech infra - to ok
- ale w duuuzych systemach - 1 domena nadal moze byc 'unmenagable complex'

- distillation = proces wydzielania komponentow z mikstury do postaci esencji ktora bedzie bardzo wartosciowa
- MAIN D AIM = ODKRYCIE 'CORE DOMAIN'
- bo core domain jest jedynym celem dla ktorego budujemy dany soft

- c: ch15 omawia glownie "d. of core domain", wpp to efekt uboczny [generic/supporting/..]


ch15.1 core domain [cd]


// ref
- LARGE SYSTEMS MAJA MANY COMPONENTS, EACH IMPORTANT, EACH COMPLEX 
- W REZULTACIE 'ESSENCE OF BUSINESS MODEL' JEST NIEJASNY I ZANIEDBANY [PRZEZ 2ND-ARY STUFF]
- nie mozna all components keep in HQ, musisz ustalic priorytety
- zeby model domeny swietnie sluzyl biznesowi musi byc wypolerowany na max'a CRITICAL CORE

problem: devs lubia kodowac ale
- tech. infrastructure
- prosta domene - nie wymagajace duzej wiedzy domenowej
  
SOL
- zdef. core domain i wyroznij ja z wielu supporting models/code
- najbardziej specjalizowane koncepty domeny - zrob "wyrazne"
- core should be small

- zatrudnij do CD 'top talents'
- laduj energie w CD [zeby ulepszac model]
- use supple design - zeby kod byl clear


// book
c
- system ktory trudno zrozumiec [bo design jest weak] = trudno zmienic
- devs czesto specjalizuja sie w wybranch obszarach - nie wiedza co sie dzieje poza nimi = BAD
  - nie ma transferu wiedzy, cierpi integracja, tworza sie duplikacje ...

c: wg ee
- 'best devs' lubia grzebac w technologies [ze wzg. na CV]
- a 'rest of devs' - robi domene
- powinno byc odwrotnie

- w trakcie prac - fokusuj sie na zadaniach zw. z core domain
- zbyt czesto robione sa poboczne zadania

- distilling CD nie jest proste
- ale to meeeega ulatwia pozniejsze decyzje


ch15.1.1 choosing the core


- szukamy elems ktore reprez. business domain i ROZWIAZUJA business problems
- co wsadzamy do CD - zalezy od biznesu

example: model money
- wiele apps wymaga generycznego modelu money
- ale apps do currency trading - moze wymagac more complex logic i money bedzie w core
  - c: acz i tu czesc wspolna money moze byc w generic

example: shipping app
cd = consolidating cargos for shipping, routing container through the way ...

- jak wszystko w ddd - zakres CD - ewoluuje iteracyjnie
- np. w v0 sth0 przypiszesz do CD a sie potem okaze ze ma to supporting role i odwrotnie
- do CD nalezy tez wybrane relacje
// g: pp pokaz relacje zasadzie: jak wazna relacja to pokaz both sides

// g: wg ee KAZDA czesc w projekcie DDD ewoluuje iteracyjnie


ch15.1.2 who does the work


- czesto best devs robia infra a powinni modelowac domene
- przypisz devs z long term commitment do CD
- long term - bo zespol musi kumulowac knowledge
- c: wg ee domain is challanging work - zacheca devs do pracy w tym obszarze ;]
- c: do short term changes - mozesz brac devs z zewn.
- c: doradcow mozna brac do mentoringu 'jak co robic' a nie do rozkminiania domeny

c
- nie da sie kupic CD
- byly proby robienia generic tools do budowy CD - ale nieudane
// g: acz proste/powtarzalne business [sklep, warsztat ..] nie potrzebuja unique CD

conc
- tworzenie distincting SW: pochodzi od stabilnego zespolu kumulujacego wiedze i cruch'ujacego te wiedze w rich model
- nie ma tu skrotow


ch15.2 an escalation of distillation


// nothing spec


ch15.3 generic subdomains


// ref
- niektore elementy modelu dodaja complexity a nie dodaja 'specialized knowledge'
- all unnecessary elems - powoduja ze core jest trudny do zrozumienia
- model czesto jest overloaded ogolnymi elementami - robi sie chaos
- acz te dodatkowe elems - sa ISTOTNE do dzialania doemny

SOL
- IDENT. SUBDOMAINS KTORE NIE SA MOTYWACJA DO ROBIENIE YOUR PROJ
- WYDZIEL GENERIC MODELS OF THESE SUBDOMS I UMIESC JE OSOBNYCH MODULACH
// g: moze w subd. moze byc 'troche' spec. wiedzy i trzeba to przeniesc do core?
// g: oblukaj przyklady u vv - co jest core/supp/gener

- W SUBDOM NIE MA BYC SLADU O TWOJEJ SPECIALIZACJI
- zadania z subdom maja lower prio niz CD
- rozwaz kupno: off-the-shelve app or model of generic problem


// book
- name incons: tu mamy 'generic SUBDOMAINS' a wyzej bylo 'core DOMAIN'

- czesc modelu oparta jest na koncepcjach uzywanych przez many diff businesses
- eg: corpo org chart [struktura org], sledzenie przesylek, ksiegowosc ...

- too many efforst are spent on perferial issues in the domain
- eg: walki z time-zones/czasami

- trudno rozdzielic core od mixed in it other elems
- ale da sie - wg w/w SOLs

***

option 1: off-the-shelf solution
adv
- mniej kodu do skumania
- wydzielony na zewn. koszt maintananceu
- pp more mature code than homegrown
disadv
- potrzebujesz czas na sprawdzenie kodu i zrozumienie
- quality moze byc low
- overengineering - czasem integracja moze byc drozsza niz "mini homegrown impl"
- outer elems - zwykle nie integruja sie smoothly [pobranie danych z innych twoich pakietow ..]
- uzaleznienie od konkretnych wersji libs, tools ...
conc: rather good

option 2: published design or model
- masz gotowy model i go 'kodujesz'
avd
- model zwykle opracowany przez wielu ludzi = better than homegrown
disadv
- nie pasuje do needs, bywa overengineering dla your needs
conc: ogolnie ok - jak z Analisys Patterns Fowler'a

option 3: outsourced impl
- zlec impl. generic domain do outer devs
adv
- core team stays on CD
disadv
- outer team wymaga supportu z core team [do  wystawienia interfaces, ustalenia coding standards ..]
- quality can be low
  - turbo wazne sa testy autom.
    - my dajemy acceptance tests
    - dostawca - dodatkowo daje internal tests
conc: mixuj to z "published design/model"

option 4: in house impl
adv
- latwa integracja
disadv
- latwo niedoszacowac koszty

c
- wg ee z czasem bedzie dostepnych coraz wiecej modeli, impls ...


example: tale of 2 time-zones
- byly 2 projekty/teams - mialy rozne podejscie do kodowania generic w CD
- oba teams potrzebowaly reprez. "czasu z time-zone"
- team-A: 
  - stworzyl w CD w v0 klase z fake time reprez.
  - jak sie okazalo ze nie spelnia reqs - zrobili RAD, dodali obsl. time-zones
- team-B [od banku]
  - zanim stworzyli CD - to juz zaczeli rozkminiac problem
  - to blad - bo za wczesnie sie na tym skupili
- acz dobrze ze oba teams wydzielily fix do generic domain
  
  
ch15.3.1 generic doesn't mean reusable


- [pp] kod z generic - nie musi byc re-usable
- put all your efforts w CD - w generic subd - tylko tyle ile potrzeba

c
- wg ee najwaz. jest re-use na poziomie modelu [a nie kodu]
- acz jak sie da zrobic code re-use - to super


ch15.3.2 project risk management


- wg 'agile' - the most risky stuff should be tried the sooner
- wg ee powinno to dotyczyc tylko 'core domain'


CH15.4 DOMAIN VISION STATEMENT


// ref
- gdy model jest rozwiniety - czastem trzeba wyjasnic wartosci systemu bez studiowania detali modelu
- wazne feats modelu moga byc oparte na kilku bc'ach
- wtedy nie zobaczysz 'szybko' HL value z modelu

sol
- opisz na 1 stronie 'core domain' i wartosci ktora wnosi
- napisz 'statement' w miare wczesnie i update'uj dok po zmianach


// book
- on proj start - zwykle model nie istnieje - ale trzeba sfokusowac prace
- later - trzeba wyjasnic wartosc systemu - bez wnikania w model
- more: niektore turbo-wazne aspekty modelu sa rozlozone na wiele bc's - stad OOTB nie zobaczymy latwo ich wartosc

- tu mowimy o 'DOMAIN vision statement' - a nie typowym 'vision statement' = notatka dla managmentu na start projektu
- domain vs - jest typowo tworzony po 'init vision statement'

- dvs - opisuje ogolne wymagania na model - co apka ma robic
- bez detali
- dvs identifies the core domain in broad terms [bo dvs jest b. ogolne]


CH15.5 HIGLIGHTED CORE


// ref
- vision statement opisuje ogolne termy core domain
- brak detali - powoduje ze zrozuemienie szcz. zalezy od interpretacji czytelnikow

c: 
- w zespole devs beda mieli zwykle 'ogolna znajomosc' core domain, bez znajomosci detali
- devs zwykle znaja tylko ich odcinka CoreDomain

c: 
- codzienne przebijanie sie przez detale modelu - angazuje energie/czas - ktora mozna by poswiecic na 'designing model' 
- a 'designing model' wymaga szczegolowej znajomosci modelu
- model CORE DOMAIN musi byc prosty do zrozumienia

SOL1
- opisz w doku [3-7 pages] elements and main interactions of core domain

SOL2
- flag the elements of the core domain within primary repo* of the model
- bez podawania detali - just flag core domain elements
// g: * - to moze byc wydrukowany model w ksiazce i oznaczony markerem, komentarze JavaDocs oznaczajace CoreDomain ...

- n: doc pp nazywa sie distillation document
- zmiany w modelu wymagaja zmiany doku
- dok opisuje tylko NAJistotniejsze elems of CORE DOMAIN [ktora sama tez juz jest "wydestylowana"]
- risk: dok moze sie zdezaktualizowac - trzeba tego pilnowac

// g: moze da sie zrobic gherkin/feature OR anotacje ArchUnit/C4 - ktore wygener. distillaiton doc?

- n: vision statement / highlighted core - nie tworza modelu/doku - tylko informuja


// book
- KAZDA tech. ktora wyszuka CD jest ok
// g: n/w 2 techs to "tylko" propozycje pasujace ee

- 2 techs of highlighted core

distillation doc
- opisuje CD
- dok moze byc w any form
  - mega prosty: lista essential concepts
  - zbior diagrams pokaz. core elems z core relations
  - ...
- to NIE jest complete design doc
// g: moze $root/read.me tez wystarczy?
- moze byc nieaktualizowany lub 'za dluuugi' - thus trzymaj go w abs. minimalnej postaci

// g: sam masz z tym problem w own projs
// - masz duuzo papers i wszedzie chaos
// - a istotne sa core'owe Ns, reszta to support/generic

the flagged core
- example: 
  - ee dostal kiedys doc 200 stron z opisem modelu
  - markerem/stick'ami oznaczyl istotne elems tego modelu
  - i z tego zrobili 1st app
- mozesz oznaczyc core elems - zaleznie co masz
  - diagramy UML - opisz stereotypem 'core'
  - kod - w javadoc dodaj komentarz 'to jest core elem'
- cel: oznaczyc elem. CD
- n: nie wyjasniaj detali of flagged element!
- cel: tylko oznaczenie elem z CD


ch15.5.1 the distillation document


- jak zmieniasz elem wylistowany w 'destil doc' to - musisz zmiane skonslutowac z reszta zespolu
- to dot. zmian inicjowanych w
  - modelu
  - kodzie
  
  
ch15.6 cohesive mechanisms


// ref
- CZASEM JEST PROBLEM BO ALG. SA SKOMPLIKOWANE I ZACIEMNIAJA DESIGN
- ZAMIAST 'WHAT' WIDZIMY DUZO 'HOW'
- example: wieeeele metod tworzy alg - i te ktore wyrazaja 'jak cos robic' overwhelms te ktore mowi 'co robic'

// book
c
- baza w oo jest enkapsulacja
- w met. z intention revealing names [nazwy mowia co jet robione a nie jak] - chowasz complex algs ktore wiedza JAK robic CO
- deklaratywnosc jest na poziomie nazwy metody
// g: moze alg zawsze jest imperative a poszczeg. kroki sa deklaratywne?

c
- jak jest duzo metod i sie gubimy
- tz. ze model pp ma problem
- potrzebny jest refactor 'toward deeper insight'
- pp sol
  - albo uproszczenie obliczen
  - albo podzielenie calcs na mniejsze i 'conceptual coherent' czesci
  
SOL
- wydziel koncepcyjnie spojne mechs w 'lightway framework'
- fwk w sensie: cos do pozniejszego uzycie [niekoniecznie interf. ktory implujesz ..]
- exposes fwk through intention revealing interface

- w cohesive mech pp chodzi glownie o 'computation algs'

example: org. chart
- org. potrzebowala failrly elaborated model of org. chaft
- they needed to search kto jest uprawniony do zatwierdzenia sth etc
- zadanie zlecono zewn. firmie - ktora zakodowala wyszukiwanie na teroii grafow
- nazwy w module pochodzily z teorii grafow np: nodes -> people, edge -> arc
- nie mozna bylo lib bezp. wpiac w domene bo
  - przywiazalo by to domene do konkr. lib
  - [najwazniejsze] nazewnictwo przeniesone do modelu bylo by nieczytelne
- sol: model i w/w lib nie byly mieszane
// g: pp nie powinnismy uzywac slownictwa z zewn. libs - all powinno byc 'nasze'

example: obsluga specyfikacji
- w core/supporting domains mozemy tworzyc specyfikacje z jezykiem 'domeny' [and, or ..]
- impl. specyfiakcji [laczenie spec. z OR, AND ..] - to juz cecha framework - poza modelem
// g: w modelu mamy zatem tylko INTERFEJS biblioteki

- CM uzywamy w core/generic/support


ch15.6.1 generic subdomain versus cohesive mech


- generic i CM maja zadanie = odciazyc core domain
- roznia sie tym ze
  - gener/supp - reprezentuja aspekt subdomains
  - CM nie reprezentuje subdom.


ch15.6.2 when a mech is part of the core domain


- prawie zawsze chcesz usunac mechs z CoreDomain
- wyjatek: mechanizm jest "rozw. wlasnym firmy" i jest kluczowy w domenie
  - np. jakis mega specjalizowany alg. liczenia "sth" ["firowy" alg lieczenia ryzyko w kredycie ..]


example - cd org. chart
- po roku trza bylo zmienic alg. wyszukiwania chart - dodac nowe pola
- devs wciagneli mech do core'a
- to czasem jest ok - jesli po zmianie mamy 'deeper model'
- acz any mechs - warto wydzielic poza core d


ch15.7 distilling to a declarative style


- CM best sprawdza sie jak jest wystawiony przez 'intention revealing interfaces' z 'concept. cohesive asseritons' i SEFF
- cala core - mozna [pp] utrzymac w stylu deklarative - trzeba uzywac tego stylu
- na cale core mozna narzucic 'supple design' - wowczas elementy core d mozna laczyc jak zdania


ch15.8 segregated core


// ref
- elems modelu moga miec role: core / supporting
- core elems moga byc scisle zwiazane z generic elems
- now: conceputal cohesion of core can be less visible
- nie widzimy waznych rzeczy - design moze byc weak
- thus: core can be not unified, can be nieczytalny, nieoptymalny ...

SOL
- refactor model - separate core and supporting concepts
- increase cohesion of the core and reduce coupling to others
- generic or supporting elems - przenies do innego pakiety 
  - nawet jesli oznacza to rodzielenie highly coupled elements [g: core elems?]
  
// book

- usuniecie generic - powoduje ze core staje sie prostsza
- zwykle to trudne - i nie zawsze jest to warte trudu

- SegCore - to zasadniczo to samo co wyciaganie generic subd ale w SC zaczynamy od 2nd strony
- cohesive subd moga byc wydzielone do own packages

***

kroki przy refactorze SegCore
1 ident. core domain - pp jest opisana/naszkicowana w distillation doc
2 przenies klasy zw. z Core do nowego module [nazwanego po nazwie koncepcji]
3 refactor - znajdz dane/metody - ktore nie sa zw. z core 
  - wrzuc ja do innych klas w innych pakietach
n
- nie badz perfekcyjny w supp. dom. - nie trac na to duzo czasu
- focus on cleaning core - make refs z core do innych modules - explicit [beda refactored later]
4 refactor seg. core module - uprosc interakcje wewn. i do zewn. modulow [bo tak, sa takie moduly]
5 clean next core


ch15.8.1 the cost of creating seg. core


- czasem wydzielenie SegCore powoduje ze refs do non-core elems stana sie niejasne
- ale ta wada bedzie przewazona przez zalety oczyszczenie CD

- czasem trzeba przegrzebac calkiem cohesive module - zeby wydzielic CD
- ale to jest warte tego - zeby miesc cohesive CD
- bo biggest added-value dla firmy pochodzi z CD

- typowo wydzielenie SegCore to duzo pracy

kiedy warto SegCore
- gdy BC staje sie duzy
- BC jest krytyczny dla systemu
- model jest obscured by sporo 'supporting capabilities'


ch15.8.2 evolving team desision


vin
- wszystkie decyzje w obszarze 'strategic' musza byc robione przez caly team
- incl. decision o robieniu SegCore

- core d [jak wszystko] ewoluuje
- podczas robienia SegCore - beda pp jakies 'insights' = baza do refactors
- decyzje o tym gdzie sa granice SegCore, CD - one beda sie zmieniac

// g: diff miedzy SegCoreModule and CD
- SCM - to modul
- CD - to domena


example: seg-core of cargo model
- przyklad jest prosty
- w realu model bedzie moooocno skomplikowany - zeby zmotywowac nas do budowy seg-core
- 1st: think co jest esencja modelu - ktora funkcjonalosc
  - btw. mozesz sprawdzic domain vision statement - co jest core'm modelu
- na poczatku mamy moduly [i bc'e]: shipping, billing
- tworzymy pakiet delivery i wydzielamy tam the most core classes z shipping
  - w example - klasy zwyczajnie zostaly przeniesione do 'delivery'
- n: miedzy pakietami shipping i delivery jest 1 relacja [miedyz klasami Cargo - Customer]
- vin: pakiet delivery ma oznaczenie <<core>> - stal sie core'm

czesto przy przenoszeniu klas do SegCoreModule - trzeba bedzie rozdzielic klase na resps
- mocno biznesowa [idzie do SegCore]
- generyczna/supporting [zostaje w old packae]

- 1st step w SegCore refactor - to wydzielenie 'new core'
- 2nd step - to oczyszczenie old packages [z ktorych wyciagnales SegCore]
- example
  - ee z shipping wydzielil 'logistic' ...
  
finalnie mamy modules/subdomains
- delivery - seg-core
- billing - generic subdomain
- 2x supporting "roles" [subdomains]

doubt: dziwne ze moduly refuja do siebie [przez ref. cargo-customer]
- tz. ze uzywaja 1 UL [na pewno na termu: customer]


ch15.9 abstract core


// ref 
- nawet core domain moze miec tyle detali ze pokazanie big picture moze byc trudne
- moze byc duzo interakcji miedzy modulami
- albo stworzymy many refs miedzy modulami = zniszczymy wartosc tworzona przez partitioning [pp z segregated core AND cohis. mechs]
- albo interakcje beda indirect - i model bedzie obscure

SOL
- identif. w modelu the most fundamental concepts ktore maja maja rozne wersje - wyciagnij ich wspolny abstrakt
- project abstract model - ktory wyrazi wiekszosc interakcji miedzy komponentami
- umiesc abst. model we wlasnym module
- particular/specialized class versions - zostaja w their own modules

// book
- nawet CoreDom - moze miec tyle detali ze trudno to ujac w BigPicture
- zwykle podzial complex domain na mniejsze - wystarczy zeby zrobic model czytelnym
- ale czasem interackje moga byc obscure [miedzy modulami]

- consider slicing horizontally than vertically [zeby zastosowac poliformizm, dziedziczenie]
- jesli wiekszosc interkacji miedzy modulami dziala na jakichs abstrakacjach - to moze warto te abstrakty + interakcje wydzielic do "abstract core"

n
- nie szukamy 'tech. triki' na dziedziczenie
- ABSTRACT CORE - JESLI ABSTR. INFERFESC REALNIE WYRASTA Z KONCEPCJI DOMENY
- to ze klasa jest czesto refowana w innych modulach - NIE znaczy ze mamy ja wydzielic do core

wydzielenie AC daje
- mniejszy coupling miedzy innymi modulami
- mamy more cohesive CD

po refactorze w kier. AC
- spec. klasy beda refowac ACModule [a nie inne spec. modules]


ch15.10 deep models distill


- ee podkresla - ze distillation [this ch15 = distill] to 
- oddzielania od core'a domen supportujacych
- refinowanie tych domen

- the goal is acheive design - that create model obvious!!!

c:
- breakthrough - ulepsza model wszedzie
- ale ... w CD - moze nawet zmienic cele projektu


ch15.11 choosing refactorings targets


co jesli large system jest zle zaprojektowany
a musisz go zmienic

1 pain driven refactoring 
- kiedy musisz cos zrobic w kodzie ale jest tam taki syf ze musisz go przedtem poprawic
- if zmiany dot. CD - to robisz w CD refactor

2 free to choose refactor
- wtedy refact. CD


// 9.26.15.49.15