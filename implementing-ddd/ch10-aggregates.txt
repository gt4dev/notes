# ch10 aggregates

- tworzenie aggs z e and vo to jeden z mniej zrozumiałych tematów DDD

typowe problemy - robienie aggs zbyt
- duzych (za wiele e-s)
- malych (nie chronia invariants)


## 1 using aggregates in the scrum core domain


- samples from BC: APM


### 1.1 1st attempt: large-cluster aggregate


- Product is large agg with e-s: BacklogItem, Release, Sprint ..
- struktura jest prosta
- ale tworzy duzo problemow
  - many tx will fail (due to conflicts)
// g: p/p w "1 user app" to ok

optimistic concurrency
- class Product extends ConcurencySafeEntity (CSE)
- CSE impls optimistic concurrency
- CSE zawiera pole concurrencyVersion (tabela ma kolumne concurrency_version)
- podczas zapisu E - jesli numer wersji w obiekcie jest starszy niz w bazie -> update jest odrzucany
- hbm uzywa elem <version> do konf OC (i wskazania pola z ver)
sample
- user A i B pracuja na tym samym obiekcie Product,ver=1
- A dodaje BacklogItem i robi commit, teraz P.ver=2
- B dodaje Release i probuje zrobic commit - tx fails bo ma stara ver

c: nadpisywanie zmian w key-value stores
- przy kazdym zapisie agg - zapisywana jest jego CALA zawartosc
- to nadpisuje zmiany innych user'ow nawzajem
- to niedopuszczalne

n: poza fails of tx - large agg has other probs
- wydajność
- skalowalność


### 1.2 2nd attempt: multiple aggregates


consider model
- 4 small aggs: Product, BacklogItem, Release, Sprint
- each refs Product by ProductId (identity of Product)

comparing to "large model"
- signature of Product agg methods have mega changes
  w large agg - jest command
    void ScheduleSprint("params desc sprint, w/o any IDs")
    ^^^^
  w small agg - jest query [factory: tworzy i zwraca agg]
    Sprint ScheduleSprint("params identyczne")
    ^^^^^^

uzycie "way: small agg"
class MyApplicationService {
  public void planProductBacklogItem(
    aTenantID, aProductID,
    aSummary, aCategory, aBacklogItemType, aStoryPoint
  ) {..}
}
- all params = primitives / strings
// g: similar form is in DB
- AS konwertuje params do VO
  - ID'kie przez "new TenantId(tenandId)"
  - reszta przez "static methods/factorie" w VO
      BacklogItemType.valueOf(backlogItemType):BacklogItemType
- z repo wyszukujemy agg Product
- call [zwraca nowy BI]
    product.planBacklogItem("params jako VO"):BacklogItem
- agg BI dajemy do repo
    biRepo.Add(bi)
    
c: VV prefix'uje params metody przez 'a': aProductID, aBacklogItemType

- w 'small agg' nie ma problemu konfliktow tx-es
- mozna rownolegle tworzyc dowolna ilosc aggs

- w modelu 'large' mozna ustawic HBM/optimisticLock=false 
- eliminuje to problem z konfliktami tx (przy wersjonowaniu)
- ale zostaja inne problems


## 2 rule: model true invariants in consistency boundaries


- zeby odkryć agregaty (w BC) musimy odkryć true invariants modelu - musimy!!!
- niezmienniki wyznaczaja granice agg

- inwariant = reguła biznesowa która musi być zawsze consistent
- prosta definicja

typy konsystencji
- transactional consistency TC
- eventual consistency EC

- inwariant dotyczy tylko TC

przykład
- class Agg1 { 
  // pola a, b, c
  // operacje x, y, z
  }
- inwariant c = a + b
- cokolwiek się dzieje, niezależnie jakie operacje sa wywołane = invariant zawsze [on commit] jest spełniony

- agregat w szczegolnosci okresla TC boundary
  - obszar zawsze konsystentnych danych - // g: w sensie inwariantu

- consistency zwykle pochodzi z TX z DB
- podczas commit wszystko wewn. granic agregatu musi byc consistent
- acz w "tmp  state" inwariant nie musi byc zachowany, acz powinien

- BC modyfikuje tylko 1 agg w 1 tx

- aby wyznaczyc granice agg trzeba zrobic analize tx-es - co kiedy ma byc TC

duzo zalezy od UserInterface
- ile aggs modyf. 1 use case
- powinien modyfikowac 1 agg


## 3 rule: design small aggregates


std problems of large aggs
- tx conflicts
- performance
- scalability

sample performance problem [1 of many]
- assume >large< agg Product contains 1k of BIs, Sprints, Releases ...
- dodajesz new BI
- wczytujesz ALL BIs (mimo ze ich nie potrzebujesz)
- to problem wydajnosci i pamieci
- c: pozostale E (Release, Sprint ..) mozna zrobic lazy-loading [nie beda wczytywane]

another probs of >large agg<
- maja zle invariants
- dla "pozornej" wygody nawigacji - tworza duze grafy obiektow

niejawne invariants
- w Product attrs name and desc sa zwykle zmieniane razem 
- stad sa w 1 agg

hint
- przy modelowaniu mysl czy dany element
  - bedzie sie zmienial w czasie
  - mozna kompletnie wymienic
.. if 2nd - project it as VO

- if you'd re-analyse your model 
- probably you'll find many Es which can be replaced with VO

c: w "avg" projekcie biznesowym
- 70% aggs ma 1 E (plus props as VO)
- 30% aggs ma 2-3 E
.. acz to zalezy od reqs


### 3.1  don't trust every use case


- typowa specyfikacja opisuje tylko use cases
- trzeba samemu zaproj. granice aggs

- czesto specyfikacja wymaga modyfikacji wielu agg w 1 req
- nalezy ustalic czy
  - mozna rozbic 1 tx na kilka mniejszych
  - realnie potrzeba 1 big tx

n
- if you modify many aggs in 1 tx - to moze zle ustaliles invariant
  - moze trzeba przemodelowac kilka aggs w nowy "koncept" (z nowymi granicami)
- or use eventual consistency
  - but check if delay is acceptable


## 4 rule: reference other aggregates by identity


- kuszaca jest wizja grafu obiektow z opcja deep navigation

wazne
- agg MOZE miec ref do root'a innego agregatu
- ale ref'owany agg NIE lezy w consistency boundary tego agg
- sample
  class BacklogItem : ConcurrencySafeEntity {
    Product product
  }


if in 1 tx you modify many aggs - it's strong hint that there is 
- bad consistency boundary
- some UL notion wasn't discovered yet

- jesli mimo dodatkowych analiz - problem pozostaje - moze uzyj eventual consistency


### 4.1 making aggregates work together through identity reference


- prefer refing between aggs by ID
- sample
  class BacklogItem : ConcurrencySafeEntity {
    ProductId product
  }
- refing by ID avoids 'eager loading'
- and model
  - is faster (less time take load to mem)
  - consumes less mem


### 4.2 model navigation


how to navigate with ID
- way 1 - "disconnected domain model"
  - call repos from inside of agg - to fetch needed agg data
  - form of lazy-loading
- way 2 - recommended
  - use repo or DS to load 2nd agg data
  - pass this agg data to 1st agg on calling its methods

way 2 sample: call <agg>BacklogItem.assignTeamMemberToTask(TeamMemberId, Team, TaskId)
- method <AS>MyAppService.assignTeamMemberToTask(..)
  - prepare params needed by agg's method
  - read agg Team from repo
  - call w/w BI method
    - nie wnikam - ale pp BI potrzebuje calego Team zeby cos wyliczyc?
  - n: ciekawe ze Team potrzebuje calosci a task - tylko id, hmmm

- way 1 is ok for complex domains
  - pass to called method ref to repo/DS 
    // q: why not make repo field of class?
  - agg robi double dispatch to dwl needed data

- way 2 frees agg from deping on repo/DS

- but each way - modify 1 agg in 1 tx

c: ui and navigations
- using IDs for refing between aggs make navigation hard
- but navigation is useful in UI, thus
  - either: read data req on UI from few repos [it's slow]
  - or: use "HBM theta joins" or CQRS

c: hbm and theta joins
- it allows to read a few diff aggs in 1 hbm query
- hbm then returns related (but diff type) objects


### 4.3 scalability and distribution


- aggs ref themselves by ID
- amazon guy says: "almost infinity scalability can be achieved"

next plus
- in app there are many BCs
- as refs are done by ID then you easy ref aggs from other BCs
- useful if you
  - modify agg and send DEvent
  - DEvent has IDs of parties involved in this change
- naturally
  - txes are divided between BCs
  - eventual consistency is used


## 5 rule: use eventual consistency (EC) outside the boundary


wg EE 
- to keep consistency and modify many aggs in 1 request - use eventual consistency
- this rule applies to all scenarios - like:
  - few aggs modified "in 1 req"
  - many aggs modified in batch processing

- domain experts must agree that delayed txes (changes) are ok

EC sample
- agg has command BacklogItem.commitTo(Sprint s)
- method at the end sends event BacklogItemCommited
  - n: send is sync, but consumption on subsciber side is async
- subers
  - run in separated TX (to keep rule: modify 1 agg in 1 tx)
  - one of subers - react on a/m -> adds info about new BI to agg: Sprint

what if modification fails on suber side
- modification can be retried
  - if suber doesn't ack that modification is done [or failed] -> event is redelivered
    // q: how queue gets info that event passed/failed?
- try many times until 'event is handled' [and consistency achieved]
- there should be limit of retries - after it app should
  - either compensate tx
  - or at least report problem to user/admin - to react - cause state in inconsistent!!!
    
c: do non-linear retires
- each next delivery do with longer and longer delay
- start with delay 1s, then 2s, then 4s - until limit
 

### 5.1 ask whose job it is


- sometimes it's hard to guess which consistency to apply (tx / eventual)
- wg EE - assess whose responsibility is to assure consistency
  - if user (who calls use-case) - do task in 1 tx
  - if another user or system - do task in EC


## 6 reason to break the rules


- czasem można zapisać kilka aggs w 1 tx
- n/w 4 powody nie sa jedyne


### 6.1 reason1: user interface convinience


- user na 1 ekranie tworzy kilka nowych aggs np. BacklogItems
- such UC handle w 1 method  
- np. AS.planBatchOfBacklogItems(productId, tenantId, BItemDesc[] newItems)
- AS.plan... tworzy klika instancji agg:BItems i dodaje je kolejno do BItemRepo, >w 1 tx<

- nie ma problemu z niezachowaniem invariants - bo tworzymy nowe BItems


### 6.2 reason2: lack of technical mechanism


- using eventual consistency reqs infra: messaging, timers, background threads ..
- some projs don't have it - sad but true

way1
- as we can't use EC -> proj p/b will end with large aggs
- this will decrease performance/scaleability
way2
- strive to create small aggs 
- if reqs can't be changed --> no choice: you can modify many aggs in 1 tx


### 6.3 reason3: global transacitons


- if you use global, 2-phase TX-es - then it looks ok to modify many aggs in 1 tx
- although it DOESN'T force us to do so
- if possible - avoid even here modifying many aggs in 1 tx


### 6.4 reason4: query performance


- sometimes you must have "active" ref from agg1 to agg2
- eg. because of ease doing fetching data ...
- you can do it but remember about problems with performance, etc.


### 6.5 adhering to the rules


- there can be many reasons to break rules
- in long term
  - keeping rules - ease project
  - breaking - make it hard


## 7 gaining insight through discovery


// apply agg rules and check influence on model


### 7.1 rethinking the design, again


current state
- domain is divided on small elements
- aggs ref each other by id

sample
- req: if sum of hours in Tasks in BacklogItem == 0 -> auto set BI as done
- it's invariant thus BI and Tasks are kept in 1 agg (BI)


### 7.2 estimating aggregate cost


technika BOTE [back of the envelope]
- estymuj ilosc obiektow bioracych udzial w danym UC/control-flow
- przyklad
  - zgrubienie określ czas trwania Sprint, ilość Tasks in Sprint ... 
  - zgrubnie policz ilosc obiektów BItem, Task ...
  - wyszlo: np. 144 obiekty na zaladowanie 1 BI w typowym use case


### 7.3 common usage scenarios


problem z optimistic concurrency
- umozliw 2+ userom dodawanie nowych Task, bez wzajemnej blokady BI [sam Task niech blokuja]
- nie moze byc ze dodanie Task do BI zwieksza wersje OC na BI
- trzeba wyłączyć hbm optimistic lock [p/p na BI]
- default OC = version [sie nie sprawdzi]
- ustaw OC = false

- ustawienie mech. OC zalezy od konkretnego UC
- ustawienie OC wybieramy heurystycznie ["przypuszczamy" jakie ustawienie bedzie dzialac w danych UCes]
- zakladamy jak userzy beda sie zachowywac - co nie musi sie sprawdzic, w realu wybor moze byc zly
- acz zawsze niedopuszczalne jest wzajemne nadpisywanie danych by users ;]


### 7.4 memory consumption


// just count objects created during UC

sample of "double lazy load"
- Tasks from BacklogItem are lazy-loaded
- lazy-loaded are also EstimationLogEntry (part of Task)

- wg VV podczas UC ladowanych jest 25 obiektow - "to nieduzo"

although it's 'double lazy ..' to wg VV ok
- optimizing it - should be done after tests/analyses - is it real problem
- not "now"


### 7.5 exploring another alternative design


// alter approaches to agg boundaries

idea: Task jako osobny agg (poza agg BI)
- pros
  - save memory (less objects are loaded)
  - eliminate lazy loading
- cons: delay in setting BI status to done (due to EC)
- but if business accept it -> idea is accepted
- naturalnie znika invariant 'auto-set BI to done'


### 7.6 implementing eventual consistency


// q: jak robione jest message redelivery (after failure)

example - use EC to set BI as 'done'
- command method = Task.estimatedHoursRemaining()
- on end it sends event EventTaskHoursRemainingEstimated
- event has attrs BacklogItemID, TaskID, hoursRemaining, ...
- suber of a/m event - calls DS which
  - get BI, Task z repo (by IDs from event)
  - calls BI.estimateTaskHoursRemaining(event.hoursRemaining, task)
  - this sets BI state to done if no more hours remain

optimalization
- instead of reading all Tasks for BI (to calc remaining hours)
- rather create specialized method in repo
  - TotalBacklogItemTaskHoursRemaining(tenantId, biId)
  - which on DB level calcs remaining hours of BI (w/o loading objs to mem)

waiting for EC and refresh UI
- app quickly update Task but BI with delay (due to EC)
- problem: what to show on UI: task is modified but BI not yet
- maybe message: "BI state is being calculated, refresh soon"
// gt: slabe, lepiej owrapowac calosc w await?


### 7.7 is it the team member's job?


// nothing special


### 7.8 time to decision


// nothing special


## 8 implementation


// nothing special


### 8.1 create a root entity with unique identity


// nothing special

- class Product extends ConcurrencySafeEntity
- CSE (layer SuperType) gives 
  - surrogate identity
  - optimistic concurrency versioning

- Product doesn't have ids of BI, Release [these have ProductId]
- Product has property Set<ProductBacklogItem>
- don't mistake it with [agg]BacklogItem
- it represents sorting of BIs

- Product ma id: domenowe i surrogate
- w konstruktorze Product jest tylko id domenowe
- surrogate jest pp ustawione przez db


### 8.2 favor value object parts


- parts of agg try to model as VO

- Product ma ref do Tenant przez TenantId
- Product i Tenant sa z diff BC
- wiec musza być ref'owane przez Id
- aggs z innych BC refuj tylko przez Id
- acz wewnatrz BC tez refujemy przez Id

integrate BCs
- Product ma ref do ProductDiscussion [VO]
- VO ProductDiscussion represents agg Discussion from another BC
- PD jest eventually consistent względem zmian w Discussion BC
- update'y sa propagowane do obiektu Product [do attr PD]
  - za pomoca eventu
  - w "delayed" tx

- ProductBacklogItem is an E [could be VO]
- as VO there'd be performance problem
  - in case of sorting change
  - trzeba by wywalic old collection of VOs i wstawic nowa collection
- as we use E - we set only attr 'ordering' [and quickly change sorting]

- w w/w case: tech wplynal na model domenowy
- acz pp niewiele - bo z client PoV nie ma duzej diff miedzy vo/e
  - w e ustawiamy attr "sorting"
  - w vo byla by zamiana calej kolekcji [?]
- if we'd use key-value store then we'd use VO [not E]
- anyway 
  - seems techs highly influence impl details of model
  - but semantic of model stays the same [?]


### 8.3 using law of Demeter and tell, don't ask


design principles:
- law of demeter
- tell, don't ask

both promo hiding infos


LOD
- promotes using 'least needed knowledge'
- sample: client (C), server (S)
- when C calls S - C should:
  - only know how to call command/query on S
  - NOT know S internals [properties ...]
- esp: C should not call internal parts of S
- if such call is needed then
  - S exposes method which delegates to internal part
  - and C calls this exposed method
- in short: metoda obiektu moze wolac inne metody
  - nalezace do tego obiektu
  - z obiektow parametrow tej metody
  - obiektu ktory stworzyla
  - of self-contained parts [obiektow zagregowane [w sensie UML] w "this"]


TDA
- mowimy obiektowi co ma zrobic
przyklad
- bad: C pyta S o dane, decyduje co robic, kaze S to robic
- good: C "mowi" S co ma zrobic [C wola command on S]

SAMPLES
- client calls 'command'
    void Product.reorderFrom(BacklogItemId anId, int anOrdering) { ... }
- client has "least knowledge" to perfom call
  - params are "primitive", 100% needed [no pollution]
  - internals of Product are not know to the client
  
- client calls 'query'
    Set<ProductBI> Product.backlogItems() { ... }
- n: it returns PBI [VO] not BI [E]
  - PBI is small [least knowledge]
  - it doesn't publish "internals" of P

- caly kod w klasie should minimize keeping knowlegde [use minimum to perform task]

- TDA/LOD są podobne
- TDA prosciej stosowac

- LOD zakazuje klientowmi nawigowac po grafie obiektow (eg. agg)
- TDA
  - pozwala na nawigacje [nie zakazuje jej ;]
  - wymusza modyfikacje stanu agg przez commands

- czasem agg moze stosowac tylko TDA [bez LOD]


### 8.4 optimistic concurrency


bad sample
- set OC only on root entity
- increas on ANY change in agg boundries

// q: jak chronimy invariants - gdy sub-E maja own versions

sample [hbm]
- kiedy w Product zmieniamy name/desc/.. -> podbijamy version of root - it's ok
- prob: jak zmieniac ver kiedy zmienia sie order of BacklogItems [reprez. przez e ProductBacklogItem]
- modyf. ProductBacklogItem nie jest widziana przez HBM jako zmiana Product [przez mech. version'owania]

- PBI sluzy tylko i wylacznie do sortowanie BIs wewn. Product
- c: jest sub-E, ma ref do TenantId, ProductId [koszernie, po ID ;]

avg fix: sztuczne podbijanie Product przy zmianie PBI
Product.reorderFrom(..) {
  // read ProductBacklogItem
  // modify PBI
  version(version() + 1)
}
probs:
- Product.version zmienia sie takze jesli call to reorderFrom(..) nie zmienia kolejnosci
- wyciek infra do modelu
  
GOOD FIX
- przy modyf PBI nie podbijaj P.version
- PBI ma own OC
- OC chroni single PBI przed nadpisywaniem przez wielu users

- versioning all E parts doesn't work in every case
- sometimes [to protect invariants] we must modify root version
  
alter way
- use hooks provided by hbm
- cfg root version-ing as dirty and manually handle OC
- trzeba uzyc bidirectional relation - co EE mega mega odradza
    
alter way
- podziel agg na mniejsze i uzywaj std OC [if ok from invariants PoV]
- niezalecane - bo model ksztaltuje infra
- ale moze uzasadnione

- wg VV problemu nie ma w techs gdzie agg zapisujemy jako calosc [mongo, riak ..]
// gt: pewnie sa problemy z brakiem OC ;]


### 8.5 avoid dependency injection


- injecting repos or DS to aggs is bad
- bo aggs moga dociagac inne aggs
- reced way: load all data/aggs before calling method on agg
- btw. wstrzykuj Repos, DS do AS etc.