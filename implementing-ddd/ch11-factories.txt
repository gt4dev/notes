# CH11 FACTORIES


## 1. FACTORIES IN THE DOMAIN MODEL


std used patterns
- abstract factory
- factory method
- builder

// g: seems builder can be used as f

wg EE - f
- tworzy caly agg zapewniajac invariants
- nie wystepuje bezposredni w UL - ale jest wazna czescia modelu
- ukrywa detale przed klientem detale

postacie 
- stand-alone
- hooked on aggs [as f methods]
  - v. useful - ma dostep do detali agg 
  - latwo tworzyc inne aggs z danych z curr agg

- f methods on aggs [g: standalone f-s too] - can have names which express UL terms
- it is not possible if using constrs alone

- service moze dzialac jak f
- produkuje agg or vo
- useful in BCs integrations


## 2. FACTORY METHOD ON AGG ROOT


przyklady f-methods - expressing UL terms
Tenant.provisionGroup(..):Group
Tenant.offerRegistrationInvitation(..):RegistrationInvitation
Forum.startDiscussion(..):Discussion
Discussion.post(..):Post

- all w/w tworza nowy agg
- w iddd-sampl most aggs ma f-methods tworzace inne agg


### 2.1 CREATING CalendarEntry INSTANCES


ciekawy unit test
- mamy f metode scheduleCalendarEntry i jej test
- wewn. testu
  - wolana jest w/w metoda
  - dodatkowo testowane jest wysylanie eventu [wysylany wewn scheduleCalendarEntry]

- scheduleCalendarEntry ma duuuzo [9] params 
- nie wszytko jest sens kompresowac w single vo

wewn. f scheduleCalendarEntry NIE wywoluj guards sprawdzajace method params!!!!!
- just pass params to "new CalendarEntry(all 9 params + some more)"
- nie ma potrzeby dodawania guards - bo wiemy ze w constr. (of e/vo) 
  - sa wolywane self-delegates sprawdzajace obiekt
  - sprawdzana jest spojnosc calego obiektu
- thus 
  - zawsze rob checks/guards w konstr. e/vo 
  - i NIE powtarzaj tego w innych miejscach
  
- constr. CalendarEntry is protected
- client must use f

wada f on agg
- zeby stworzyc CalendarEntry
- musisz wyciagnac z bazy Calendar i wolac f
- to moze obnizyc wydajnosc ale to czesto uzasadniony koszt


### 2.2 CREATING Discussion INSTANCES


sample 

Forum.startDiscussion(..):Discussion {
  // tu robimy guard!!! bo nie ma tego testu w constr [cmp a/m sample]
  if(this.isClosed()) 
    throw new Exception("can't start on closed disc");

  // reszta guards jest robiona w constr. of agg / vo
  var d = new Discussion(...);
  ... 
}


## 3. FACTORY ON SERVICE


// big cut

- tworzymy osobny service
- useful przy integracji BC'ow
sample
interface CollaboratorService {
  authorFrom(..):Author
  creatorFrom(..):Creator 
  ..
}
- dzialanie: BC Colaborator access BC identity, reads User + Role and creates vo-s: Author, Creator ...
- to factory tworzy vo-sy [nie aggs]!!!
  class Author extends Collaborator implements Serializable {...}