# CH11 FACTORIES


## 1. FACTORIES IN THE DOMAIN MODEL


typowe patterns
- abstract factory
- factory method
- builder

all a/m can be used as f

wg EE
- f tworzy caly agg zapewniajac invariants
- f nie wystepuje bezposredni w UL - ale jest wazna czescia modelu
- f ukrywa detale - klienta nie zna detali

postacie
- stand-alone
- hooked on aggs [as f methods]
  - v. useful - ma dostep do detali agg 
    - latwo tworzy inne aggs [etc] powiazana z curr agg
      - mniej kodu - mniej bledow

- f methods on aggs - can have names which express UL terms
- what is not possible from constrs alone

- service moze dzialac jak f
- produkuje agg or vo
- useful in BCs integrations


## 2. FACTORY METHOD ON AGG ROOT


przyklady nazywa metody-factories wg UL

Tenant.provisionGoup(..):Group
      .offerRegistrationInvitation(..):RegistrationInvitation
Forum.startDiscussion(..):Discussion
Discussion.post(..):Post

- all w/w zwaracaj stworzony agg
- w zasadzie each agg ma f ktore tworzy "potomny" agg


### 2.1 CREATING CalendarEntry INSTANCES


ciekawy testu
- mamy test metody f = createCalendarEntry
- wewn. testu
  - wolana jest f = scheduleCalendarEntry(..)
  - dodatkowo testowane jest wysylanie eventu [wysylany na eo scheduleCalendarEntry]

- scheduleCalendarEntry ma duuuzo params [9], well - "complex domain"

wewn. f scheduleCalendarEntry NIE wywoluj guards!!!
- just take all method params and pass it to CalendarEntry constr
- nie ma potrzeby dodawania guards - bo wiemy ze w konstr. e/vo 
  - sa wolywane self-delegates sprawdzajace obiekt
  - sprawdzana jest spojnosc calego obiektu
- thus zawsze rob checks/guards w konstr. e/vo - i nie rob tego w innych miejscach
  
constr. CalendarEntry is protected
- client can't call it, must use f

wada
- zeby stworzyc CalendarEntry
- musisz wyciagnac z bazy Calendar i dopiero wolac f
- to moze obnizyc wydajnosc ale to czesto uzasadniony koszt


### 2.2 CREATING Discussion INSTANCES


sample 
Forum.startDiscussion(..):Discussion {
  // tu juz jest uzyty guard [vs a/m sample]
  if(this.isClosed()) throw new Exception("can't start on closed disc");

  // reszta guards jest robiona w constr. of agg / vo
  var d = new Discussion(...);
  ... 
}


## 3. FACTORY ON SERVICE


- tworzymy osobny service [eg: CollaboratorService]
- useful przy integracji BC'ow
- sample methods
  authorFrom(..):Author
  creatorFrom(..):Creator 
- dzialanie: BC Colaborator access BC identity, reads User + Role and creates object Author, Creator ...
- to factory tworzy vo-sy [nie aggs]!!!
  class Author extends Collaborator implements Serializable {...}