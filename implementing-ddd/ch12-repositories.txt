# CH12 REPOSITIORIES

wg EE
- provide r only for aggs that needs global access
- provide illusion of 'in-memory' access
- access r through interface

- czasem jak kilka aggs ma wspolna hierarchie - to sa wyciagane z 1 repo

c: to idea vv - podzial repos na 
- collection
- persistance 
.. oriented


## 1 COLLECTION ORIENTED REPOS


- COR to klasyczne podejscie z DDD
- repo nasladuje zachowanie [kontrakt] kolekcji
- avoid in r any notion of saving data

standardowe zachowanie kolekcji to
- po dodaniu obj do kolekcji - jest on tam caly czas
- jak wyciagasz i zmieniasz obj z kolekcji - kol NIC o tym nie musi wiedziec
  
sample
interface Collection {
  add
  addAll
  remove
  removeAll
}

typowe zachowania repo
- jak 2nd time dodajesz obj do HashSet - to old obj. jest nadpisywany
  - esp: nie leci excep 
- podczas get obj gdy obj nie ma - dostajesz null [takze dla GetEntityById(id)}
  - esp: nie leci excep
- rzucaj excep jesli query params sa nieprawidlowe ["poza zakresem"]

- don't save objs already held by repo
- po get obj z repo i modyf - nie wstawiaj go z powrotem do repo

c: vv troche sp*l
po co tu rozszerzal HashSet? 
class MyRepo extends HashSet<Calendar>
  add(Calendar c) {..}
}


persiting mech
- pers. mech - musi umiec rozpoznac ze obj zostal zmieniony
- many possible impls - below only 2
- oba podejscia maja rozna wydajnosc
- w obu cases - sledzenie zmian jest niezauwazalne dla klienta
  - user wola tylko 'commit'

1 implicit copy on read
- poczas reconstituting [from store] are created objects
  - private copy
  - for use by client
- on commit [called by client]
  - mech cmp both objs
- jak sa diffs -> changed objs are flushed to store
- c: przy lazy loading - cmp'ed are only [lazy] loaded elems of e

2 implicit copy on write
- przy reconst. 
  - obj wrapowany jest 'light proxy' 
  - returned to client
- klient wola metody na "proxy"
  - pers mech zna widzi te calls
  - docelowe metody tez sa wolane
- on 1st proxy method call - PM robi kopie obiektu i oznacza go jako dirty
- on commit - all dirty objects are flushed to db


### 1.1 HIBERNATE IMPL


- n: hbm tworzy collection oriented repos

typowy interf
interface CalendarRepository {
  void addCalendar(Calendar cal);
  void addAll(Collection<Cal> cals);
  void remove(Cal cal)
  void removeAll(Collection<Cal> cals)
  ..
}
- interface mimics collection behaviour
- jak usuwasz - to dajesz cala encje
- jak dodajesz to zwracany jest void [nie id ..]
  - std kolekcja zwraca boolean
  - VV zwraca void bo
    - zwracanie true [jako ack sukcesu] jest pozorne
    - real success of add/remove/.. mozna oglosic dopiero po tx commit
- lekko dyskusyjne jest posiadania metod add/remove[All]
  - bo aggs najczesciej zmieniamy pojedynczo

usuwanie aggs
- jak pobierzesz cos z repo i ktos ma do tego ref - to nie mozesz tego obiektu 'usunac' ["anulowac" ref ..]
- mozesz ew. oznaczyc encje flaga 'removed' etc

finders
interface CalendarRepositrory {
  Calendar calendarOfId(CalId)
  ..
}
- if szukamy po id i nic nie znajdujemy - to zwroc null [a nie excep]
- to naturalne w kolekcjach


subfolder impl w modelu
- czasem umieszcza sie impl of repo w domain.model
  mybc.domain.model.calendar.impl
- it's popular pattern in java
- teoret. sam model nadal jest [nie ma technikaliow]
- acz "typowo" impl. interfejsu jest w ns:infrastructure
g: pewnie da sie tak robic dla innych 'technikaliow' [klient poczty, stub serwisu ..]
  - folder $root
    - logika bazujaca na interfaces [wolna od techs]
    - czysty UL domenu [nawet technicznej]
  - folder $root/impl
    - technikalia z poza UL

delete in hbm
- metoda remove(Calendar c) pobiera pelny obiekt [nie tylko id]
- bo impl. calls: session().delete(wholeObject)
- ale hbm ma kilka ways for deletes

cascade delete
- albo przez config [set cascade]
- albo recznie w repo.remove(Parent parent) {
  session.delete(child)
  session.delete(parend)
}


// hbm wymaga poznania
// hql, full objects w hql [jak to dziala, co hbm match'uje?] ...


### 1.2 CONSIDERTIONS TO TOP-LINK

- w top-link jest oddzielnie session, unit of work
- w hbm jest to "polaczone" w session [and tx'y]

repo interface musi miec dodatkowa metode

way1: MyRepo.editingCopy(Calendar c):Calendar
- metoda rejestuje c w unit of work
- zwraca proxied object, ktory TL monitoruje [na zmiany]
way2: MyRepo.UseEditingMode():void
- po wywolaniu tej metody all gets from repo return objects sa 
  - wpiete w unit-of-work
  - proxied/monitored

- to nadal styl 'collection oriented repo'
- chociaz juz dosc mocne przegiecie z dodatkowym callem


## 2 PERSISTENCE ORIENTED REPOS


- use when pers mech can't detect changes
- sample case: NoSQL key-value data-store, oracle coherence

- idea: all changed objects you pass to repo's method save(changedObject)

- save(..) moze byc w postaci put(..)

global n
- obiekt musi miec identity - zeby repo moglo go zapamietac/potem zakualiziwac

takie repo mimics Map/HashMap

key-value store dziala jak Map
ale zasadniczo 
  - kazde repo tak dziala
  - kazdy map to store typu key-value

- zawsze wolaj save/put zeby utrwalic zmiane
- wynika to ze sposobu dzialanie unit of work w takich repos

g/n
- repo w add(MyE) bierze caly agg [a nie: id + reszta]
- potem w impl. mozesz wydzielic key wstawic do mapy<key, my-e>


### 2.1 COHERENCE IMPL


interface ProductRepository {
  save(Product p)
  saveAll(Colection<Product> ps)
  productOfId(pId)
  ..
}  

flow
- po modyfikacji agg 
- call save(..) zeby utrwalic zmiane
  p1 = new Product(..)
  repo.save(p1)

  p2.modifySth(..)
  repo.save(p2)


c
- vv czesto w AnyRepo.nextId() zwraca random UUID
- nie uzywa db, caches ...


### 2.2 MONGO-DB IMPL


// cut, nothing special



vvvvv cont here


## 3 ADDITIONAL BEHAVIOUR


sample: liczenie instancji agregatu

zeby byc zgodnym z namingiem java's Collection - name it size() not count()

interface CalendarRepository {
  int size();
}

naturalnie - w impl. size() uzywasz wewn. mech. store'a [select count ;]
nieczego nie ladujesz to mem

czasem w repo warto doczytywac tylko fragment agg
to zaprzecza idei ze repo zwraca tylko agg - nie zwraca: czasem zwroci w/w frag, czasem cos wyliczy ...
it's useful if there are lot of frags [or are big] and loading these frags with agg - would be bad
performance is in practice only reason to do so

n1: w/w pokazuje ze z zewn. agg mozemy czytac inner e-s - jesli sa publiczne [w ramach agg]
n2: w/w jest mozliwe tylko jesli agg udistepnia na zewn. swoje e-s [upublicznia je] 

use case optimal query
czasem w 1 tx chcesz wyjac more data niz ma single agg [or list of aggs]
chcesz wyjac poszczegolne dane z roznych typow i instancji aggs
wyciaganie aggs i skladanie z nich dto moze byc bad
dodaj do repo UCOQ
zwraca ono vo-sy designed to address UC needs

g
- create repo UCOQ
- calosc siedzi w modelu (i zwraca modelowe vo-sy zaprojektowane pod UC)

- ale jesli w wielu repos tworzysz UCOQ - to jest to pp smell
- mozliwe z 
  - zle podzieliles model na aggs
  - all is ok -> wtedy potrzebujesz cqrs


## 4 MANAGING TRANSACTIONS


- domain model and domain layer is NEVER good place to manage tx-es
- zwykle operacje zw. z modelem sa 'fine grained' i nie powinny byc swiadome tx-ow
- chociaz pewnie sa wyjatki

- zwykle tx-y sa zarzadzane na poziomie application layer
- AS zarzadza tez security [transforms input/output to domain objects]
- AS tworzy facade pattern
- AS po wykonaniu all calls to domain layer
  - if all was ok - commits tx
  - else - rollbacks tx
  
- tx mozna kodowac
  - deklaratywnie 
  - recznie
- logicznie efekt jest identyczny [ale eliminuje boilerplate]

sample
myAppServiceUseCase {
  Transaction tx = null;
  try {
    tx = session().beginTransaction();
    // CALL DOMAIN ...
    tx.commit()
  }
  catch {
    tx.rollback()
  }
}

- repo musisz miec dostep do session [jak w/w] or unit-of-work ktora wystartowal AS

- zwykle tx'ami zarzadzaja containers/IoC
- many ways/patterns are possible [Spring ..]

@Transactional
myAppServiceUseCase {
  // CALL DOMAIN ...
}

n diffs
- mega uproszczenie z deklaratywnym podejsciem
- wywalenie boilerplate code'a


## 5 TYPE HIERARCHIES


// big shortcut

- can be that there is 'base agg' from which other aggs are derived
- dla calej hierarchii tworz 1 repo dla all types
  - to repo raczej zwraca on base agg
- wazne by po stronie klient nie budowac logiki typu "if agg typeA then do x, if typeB then do ..."
- taka logika powinna byc schowana po stornie modelu


## 6 REPO VS DATA ACCESS OBJECT


- DAO uzywa names z db tables
- DAO daje CRUD do tablic z DB

- Fowler w EAA (pp) opisuje ref CRUD arch
- uses patterns: table module, table data gateway, action record, transaction script


## 7 TESTING REPOS


- repos tez musisz testowac [zeby miec pewnosc ze all dobrze zapisujesz/odczytujesz]

sample
testSaveAndFindOneProduct() {
  var product = new Product(...) // create agg
  productRepository.save(product);  // test saving
  var readProduct = productRepository.productOfId(product.Id); // test reading
  assertEquals(product.sth1(), readProduct.sth1()) // po kolei cmp states
  assertEquals(product.sth2(), readProduct.sth2())
}

- tip: jesli 1 metoda testuje write/read single agg to next tests 
  - can ignore this part of test [write/read agg]
  - focus on other repo aspects [eg: write 3 aggs, read 3 aggs - juz bez spr. contentu of aggs...]
  
  
### 7.1 TESTING WITH IN-MEMO


- prepare in-memo repo real repo np: jest ciezkie, nie ma [still] real db ...

class InMemoryProductRepository extends ProductRepository {
  Map store = new HashMap() // // zwykla mapa
}