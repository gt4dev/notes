# CH7 SERVICES


- w DDD serwis = bezstanowa operacja wykonujaca zadanie z domeny
- stworz serwis jesli metoda nie pasuje do zadnego agregatu, encji, VO


## what a domain service is (but 1st what it isn't)


- nazwe interfejsu/operacji - pochodzi z UL
- DS jest stateless
- DS'y zwykle operuja na wielu obiektach domenowych - zmienianych w pojedynczej, atomowej operacji
- typowe powody uzycia DS
  - wykonywania waznych procesow biznesowych
  - przeksztalcenie obiektu domenowy w inny
  - obliczanie wartosc na bazie stanu wielu obiektow domenowych
  // g: wyliczenia bazujaca na 1 E -> sa metodami E

    
## make sure you need a service


- logike do DS wrzucac mega ostroznie, think twice!!!
- jak za duzo wrzucisz do DS to dostaniesz 'anemic domain model'
- w "typowym projekcie" wiekszosc logiki jest w E/VO
- zwykle "wprost z UL" wynika czy logika jest z DO czy DS

- wiedza "szczegolowa" domeny nie powinna byc znana po strone klienta
- np: jak autentykujemy user'a to
  - nie wystawiamy do klienta obiektow: user, tenant, authService ...
  - wystawiamy 1 operacje np: AuthService.Authenticat(password, user):UserDesc

c: UserDesc extends Serializable [nie "VOBase"]
- UD jest z modelu (tz. z UL)
- generalnie VO u VV extenduja
  - serializable, assertion-concern ...
  - IdentifiedValueObject (which extends IdentifiedDomainObject)
  - (i moze inne)


## modeling service in the domain


- proste
- 1st decide: czy uzyc SeparatedInterface pattern [Folwer]
- interfejs wrzuc do pakietu domeny
  np: my-boudned-context/domain/model/
- if implementacja interfejsu zawiera technikalia z poza UL - wrzuc ja do pakietu infra 
  np: my-boudned-context/infrastructure/services
- typowa impl. DS.MySampleOperation
  - 1st: validate params - if bad -> throw exception
  - do logic
    - call some repos for DomainObjects
    - call methods on it
    - call next repos, get next domain objects
    - call another DS ...
    [generalnie: mix wszystkiego co potrzeba zeby wykonac logike]

- c: VV wrzuca all "IoC objects" (repos, DS, ...) do jednego worka
- bez separacji modeli, infra... 

  
## is separated interface a necessity


- jesli DS ma czysto biznesowy kod (bez technikaliow) - to mozna bezposrednio w modelu pisac klase
- nie dodawaj postfix Impl w nazwie klasy - it's against UL

przyklad: jesli masz >interfejs< AuthenticationService i "klase ...Impl" - to lepiej:
- albo dac nazwe Default... (szczegolnie jesli bedzie wiecej implementacji interfejscu)
- albo nie rozdzielac interfejsu i impl

- acz sa rozne opinie ws
  - czy uzywac postfix Impl 
  - czy rozdzielac interfejs od klasy (w przypadku pure UL)
.. nie ma co wiecej filozowac


## a calculation process


przyklad: klasa BusinessPriorityCalculator
- n: nazwa klasy NIE MA zadnego postfix Service
- nie rozdzilamy klasy i interfejsu (na chwile obecna nie ma potrzeby)
- content metody metody businessPriorityTotal(...):BusinessPriorityTotals
  - pobranie aggs z repos
  - c: repo ma metode myRepo.GetSthWhichIsSth1AndDoSth2(tenantId)
    - specjalizowana pod current case
    - jest to w "kontrze" do robienia repos podobnych do interfejsu collection
  - kod robi przeliczenia, zwraca VO

- repos
  - mozna uzywac w DS'ach
  - nie mozna (zwykle) w aggs
  
  
## transformation services


- najczesciej takie DS'y integruja BC'e
- implementacji DS czesto zawiera:
  - translatory
  - adaptery
  - ...
- implemtacja czesto rezyduje w pakiecie infra!
- VV omawia to w ch13 Integrating BC
 
 
## using mini-layer of DS


- DS czasem tworzy mini-layer nad A, E, VO
- nie jest to rekomendowane bo mozna skonczyc z 'anemicznym modelem domeny'
- ale czasem jest to uzasadnione


## testing services


- przyklad AuthenticationServiceTest : IdentityTest
- IdentityTest jest pp wspolna dla all testow z BC "identity"
- metody sprawdzaja scenariusze
  - happy day scenario "testAuthenticatinoSuccess"
  - kilka alter. scenariuszy "testAuth...FailedPassword"
- n: zeby testowac DS
  - musisz miec jakies repos
  - w realu beda to mocki lub realne R (jesli baza nie zawiera duzo danych)
- testy DS sprawdzaja dane zwracane z serwisu - czy sa ok