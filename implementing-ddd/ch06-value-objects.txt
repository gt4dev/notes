# 6 VALUE OBJECTS


- vo są czesto niedocenione (vs e)
- gdziekolwiek możliwe - uzywaj vo (zamiast e)
- same e powinny skupiac sie na serwowaniu vo

- vo sluza do mierzenia, kwantyfikowania (okreslaniu ilosci), opisywania
- ulatwiaja kodowanie, testowanie, optymalizowanie i utrzymanie (wow, all)

- popularnym podejscie [zle]
  - modelowanie domeny jako struktury tabel (1 obiekt domeny = 1 tabela) 
  - powiazanie tabel kluczami
- to czyste zlo
  - mocno zszyty wielki graf obiektow
  - przeladowany set/get-terami

- obiekt vo: tworzysz, dajesz klientom i zapominasz o nim
- to rewolucjonizuje programowanie
- wg VV to jak przejście z old lang na lang uzywajace GC!!!!!!

- użyj vo jeśli interesuja cie tylko atrybuty, bez identity

- beginners często nie wiedza czy użyc e czy vo
- ale profs tez tak maja ;]


## 6.1 value characteristics


- pp powinieneś używać VO znacznie częściej niż do tej pory


### 6.1.1 measures, quantifies or desc


- VO nie modeluje rzeczy/przedmiotu z UL
- VO mierzy, kwantyfikauje, opisuje rzecz/przedmiot
- np osoba ma
  - wiek (wiek to pomiar, kwantyfikacja)
  - imię (opis)
- troche to podobne do Conceptual Whole


### 6.1.2 immutable


- VO baaaardzo rzadko ale moze byc mutable (see EE)

- od razu po utworzeniu - obiekt staje się niezmienny
- wartości tworzące VO podajemy w konstruktorze
- acz przy odtwarzaniu VO z DB, JSON, XML ... init nastepuje 'zaraz po constr' [constr. jest non-params]

obvious ale
- vo mogą referować do innych vo
- metody modyfikujące stan vo nie mogą być 
  - publicznie
  - wywołane PO constr

VO może mieć ref do E
- VV tego nie zaleca
- jak E zmieni stan, to zmienia to również VO, a to łamie zasadę niezmienności
// g: wiec chyba tylko odczyt z e przez vo
- dopuszczalne tylko jeśli ZNACZNIE uprości to kod
- ale wowczas klient 
  - nie może bezpośrednio wołać metod e
  - woła metody vo (cos jak agg)
  - a te nie modyfikuja stanu vo!

- jeśli projetkujesz obiekt (nie wiadomo czy vo,e ..) ktory zmienia stan 
- to rozwaz vo z kompletna wymieniana obiektu


### 6.1.3 conceptual whole (CW)


- VO zawiera (najczesciej) wiele atrybutów 
- każdy jest nieodlaczna częścią całości
- tylko razem tworzą pomiar, opis, kwantyfikuja ...

c: pattern CW opracowal Cuningham

przykład: 50 usd
- dwa attrs
- razem tworzą single CW - okreslaja wartość pieniężną
- osobno kazdy znaczy coś innego

przykład
class ThingOfWorth {
  MonetaryValue worth;
  ThingName name;  <<< n: VO a nie string!
}
- warto uzyc VO zamiast primitive (string, ...) jeśli V ma "zachowanie"
- zamknij zachowanie w metodzie VO (schowaj detale zachowania przed klientami)
- eg
  - thingName.CapitalizedName() // 1st letter of name is upper-case

obvious but
- vo jest tworzony w jednej operacji - w konstruktorze


### 6.1.4 replacebility


- vo is typically refed by e
- if vo in e changes - completely replace vo in e

c: setting primitives on vars = replacement
- eg: set var int from 3 to 5 - you replace value, not update

whatever amount of data you change in single vo (1 value, 1k values ..)
- build whole new vo
- set it in place of 'old'

- replacebility moze sie wydawac nieefektywne dla malych i czestych zmian
- da sie to zoptymalizowac
- przez uzycie side effect free behavior


### 6.1.5 value equality


- w app może istniej wiele roznych instancji VO które z logicznego punktu widzenia są równe
- mozesz uzyc taki single VO wszedzie w app - nie zmieni to zachowania app

- porównanie VOs robimy porownujac
  - typy obu VO
  - atrybutów (all attrs, 1-by-1)
- if both are equal - objects are equal

c: VV in equals() reads values by getters
- it's full self-encapsulation
- setters are used in constrs

c: equals() compares all INTERNAL attrs
- so cmp is done always correctly 
- regardles of derived content of VO, eg FullName CapitalizedName(), Initials() ...

vin: if object doesn't req unique identity - code it as VO, else E


### 6.1.6 side-effect-free behavior (sefb)


- EE pattern

- funkcja = metoda obiektu która nie modyfikuje jego stanu
- all SEFB to funkcje
- all vo public methods are functions

c: w funkcyjnych langs uzywa sie tylko SEFB

c: Mayer/Fowler funkcje = "metody query" 
- query nie modyfikuje obj!
- z pattern CQS (Command Query Separation) 

przykład
- FullName.withMiddle(sth):FullName
- withMiddle() zwraca nowy obiekt FullName, z ustawioanym attr "middle name"

czy vo może modyfikować e przekazana jako parametr metody vo
- jesli metoda ta modyfikuje tylko stan e (nie zmienia stanu vo) - jest to dopuszczalne
- ale to trudno przetestowac
- thus best
  - vo method should return sth what E can consume [set as field, method param ..]
  - vo method shouldn't modify e

            <vo>                        <e>
- obiekt vo businessPriority.priorityOf(product):float
- 'float' jest wyliczany ze stanu e
- problems
  - vo zależy od e (i zna jego strukture e)
    - unikaj tego
    - vo best ograniczyć do znajomości siebie i swoich atrybutów
  - nie widzimy explicite co z Product jest używane - be more explicite 
  - nie widzimy wprost czy e jest modyfikowane

- very very very rare ale czasem vo jest modyfikowalne!


vvv cont here


## 6.2 integrate with minimalism


- projekty ddd maja zwykle wiele bc
- (if possible) model concepts 
  - from remote bc (server, upstream) 
  - as vo on local bc (client, downstream)
- it minimizes amount of "inytegration problems"

przyklad
- w remote bc-r sa aggs: User, Role
- local bc-l uses data from w/w aggs
- bc-L keeps this data in VOs: Moderator, Owner, Participant
- it simplifies case a lot - in bc-L we have only_only needed data

problem: integration is static
- if bc-r changes data -> bc-l doesn't know about it
- bc-l uzyc 'eventual consistency'
  - nasluchiwac events z bc-r i aktualizowac sie
- ale wowczas dane sie zmieniaja!!!
  - nie mozna uzyc vo - trzeba dane trzymac w e
// q: a co z replacing vo?


## 6.3 standard types expressed as values


ST
- opisuje rzeczy, mierzy ... (like vo)
- rozroznie stuff (e,vo) od siebie

sample 1
- UL defs phone number
- phone moze byc dla cell, home, work, ...
- tworzymy 1 VO do reprezentacji phone number i rozorozniamy przez ST

sample 2
- UL defs currency of: usd, jpy, eur, pln

- ST are similar to enums "but" are "instantiated"

STs can be defined on diff levels
- single BC, app
- corporation
- international stds

freq STs are managed in specialized BCs, usually
- defined as Es, with attrs
  - identity
  - name
  - description
  .. and more
- you consume them as VO, usually with 1 (yes, 1) attr
  
samples (on enums)
enum GroupMemberType {Grup, User, "some overrides"}
enum  BacklogItemStatus {Planed, Scheduled, Commited...}
- yes, used std enum 
- no magic, no single vo instances, just plain enum!!!

U: instead enum you can create unique VO for each ST

ST from Agg
- 1 instance of Agg for ST type
- but think twice

c: ST (raczej) nie powinny byc utrzymywane w BC który ich używa
// - q: why?

- widly used ST should be def in specialized BC
- problem can be late modifying such STs (late = after publishing to clients)
- expose Aggs
  - on client side as VO (immutable)
  - or globally as immutable VO(?)

shared, immutable ST
- create service (DS) or factory for each shared ST
  - it reads data from shared database
- sample services are for PhoneNumber, PostalAddressType, CurrencyType
- service (or factory) returns then VO eg: Currency

acz strive to use simplest approach = enums

- VV recoms "enums based ST" also exposed from service/factory
- src code of enum must be "generated" basing on "DB content"



## 6.4 testing value objects


// regular infos
- tests write in a way that non-technical expert can understand id = use only UL


## 6.5 implementation


- BusinessPriority to super przyklad vo
- pokazuje nawet uzycie strategy pattern (aka policy)

- BP jest serializable
- to wazne przy remote calls, persisting object

VV daje 2 konstruktory do vo
- 1st - do initu obiektu (calls self-delegate methods)
- 2nd - creates copy
  - c: robimy shallow copy
    - nie kopiujemy nested objects but ref to them
    - typowo w VO deep copy nie ma sensu, acz czasem jest potrzebne
  - 2nd const - useful for testing immutability, like
    - create vo0
    - create copy vo1
    - call methods of vo1 (try to "modify it")
    - compare vo0 vo1
- u: 3th const - bez params, na potrzeby hbm, schowany (protected)

pattern strategy/policy
- vo (BP) ma publiczne metody, eg: TotalValue():float
- metoda 
  - nie dziala bezposrednio na attrs vo
  - internally calls other methods (self-delegatino and others)
  - operates on result from a/m methods
- to "strategy" bo
  - at any time you can override any of these methods
  - docelowo BP bedzie miec wiele implementacji i sie to przyda

nazwy getterow
- VV odradza nazwy metod eg getSomething()
- jesli masz metode getValueSth() to nazwij ja ValueSth
- it's more human-readable, UL-friendly

c: bad Java Beans specification
- it have had bad influence on code style
- pre JB good example: String
  - good methods: chartAt, indexOf, length ..
  - ale sa bad getSth ...

c: encapsulation
- masz setter setRatings (private, calles in constr)
- masz "getter" "public ratings()" - just returns attr value
- conc: w ten sposob mozesz "upubliczniac" private attr (to pewnie uzasadnione)

remember to impl
- equals
- hashCode
- toString


## 6.6 persisting value objects


- zwykle VO persystujemy razem z A (do ktorego jest przypiete)
- dalsze przyklady zakladaja ze VO jest czescia A
- typowo A (razem z VO) jest read/write by repo

- zwykle pers. robimy z orm
- ale to complicated (bo trzeba zrobic mapowanie, przygotowac tabele ...)
- no-SQL/key-value stores mega ulatwiaja pers. of A
  - troche o tym z ch12-repos
  - tu tylko sql


### 6.6.1 reject undue influence of data model leakage


- typowo VO is stored in DB in denormalized form (in the same table/row as hosting E)
- easy way

- czasem VO is stored as DB entity (own table, primary key ..)
- it's mainly for E with nested VOs collections

- regardless of case - DB shouldn't influence domain model
- more - it should be reverse: domain model drives data model
- although as always - there are exceptions

- sometimes particular db model structure is needed (keep ref integritiy, indexes, keys, support raporting, queries ...)
- many claim that raporting should: not work on prod DB, but has own data stucture


### 6.6.2 orm and single value objects


- easy case
- idea: store VO in the table & row of E but in own columns (each attr in own column)

column naming
- path of objects: businessPriority.ratings.benefit
- map to column: business_priority_ratings_benefit

- in hbm use <component>

c
- VV's sample nests 1 VO in another
- in hbm cfg it by nesting <component> in another <component>

- n: domain model (vo) doesn't have any stuff from DB model


### 6.6.3 orm and many values serialized into a single column


- list of VO is represented in E as Set or List
- serialize collection to text and store in 1 column

wady
- col width - sometimes we don't know
  - size of collection (can be long as text)
  - size of single object (strings can be looooooong)
  - c: w MySQL max table/column width = 65k chars    
  - c: w Oracle varchar2 max = 4k chars
- queries
  - can't use VO in Q (cause are srings)
  - but it's rather rare need
- need to impl custom hbm type (no big issue)


### 6.6.4 ORM and many values backed by database entity


- najprostszy sposob na zapisanie kolekcji VO w bazie przez ORM (esp. HBM) 
- traktujemy VO jako encje bazy danych
- VO z "model PoV" musi byc wolny od technikaliow bazy, ORM, ...
- pomaga tu pattern Layer SuperType (LST)
- VV wprowadza klase LST IdentifiedDomainObject
- przechowuje ona pole "klucz encji"
   - niewidoczny "w domenie", bo private/protected
- VV dodatkowo wprowadza klase "IdentifiedValueObject (extends IdentifiedDomainObject)"
  - klasa nie dodaje zadnego kodu
  - ma znaczenie jako dokumentacja - explicite wyraza intencje modelowania VO
  - n: IDO ma tez odpowiednik dla encji (see CH5, "Entity extends IdentifiedDomainObject")

przyklad
- agregat Group zawiera kolekcje VOs typu "GroupMember : IdentifiedValueObject"
- klasa Group jest czysta od technikaliow - po prostu ma kolekcje GroupMember-s
- HBM cfg
    <class name="Group" ...
      <set name="members" ...
        <one-to-many ...
    
    <class name="GroupMember" ...
      <id ..>
      <property ..>
      <component ..>   <-- c: bo GroupMember zawiera inne VO
          
- jak robisz replacement kolekcji - to wywolaj wczesniej members.Clear()
  - HBM usunie wowczas stare obiekty
  - btw. kolekcja jest impl. przez HBM


### 6.6.5 ORM and many values backed by join table


- HBM zapisuje kolekcje w join table 
// q: what is hbm-join-table?
- VO-s sa zapisane w dedykowanej tabeli
- VO nie potrzebuje wlasnego klucz
- kluczem obcym jest ID "parent encji"
- zaleta: obiekt domenowy VO nie musi miec (ukrytego) klucza zeby join'owac z parent (acz ma klucz parenta)
- w HBM to mapowanie robisz przez <composite-element>
- problemy
  - (chyba) zaden z VOs nie moze byc null'em - bo wartosci identyfikuja VO
  - VO nie moze zawierac innej kolekcji - bo glowny VO nie ma ID'a - wiec nie ma jak join'owac
- wyglada ok, ale VV rekomenduje podejscie "backed by database entity", a to odradza


### 6.6.6 ORM and Enum as state objects


- use it to save in DB: standardowy typ lub enum
- HBM nie wspiera enumow (as of iddd publish date)
- zapisuj enum'y przez HBM custom types (najczesciej jako stringi)
- przyklad GroupMemberType (nested in GroupMember)